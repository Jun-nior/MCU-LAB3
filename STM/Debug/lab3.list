
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec4  08002ec4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec4  08002ec4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000030  08002efc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002efc  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096bb  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b44  00000000  00000000  00029714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5a  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d01d  00000000  00000000  00043252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822e3  00000000  00000000  0005026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d25a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e88 	.word	0x08002e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002e88 	.word	0x08002e88

0800014c <fsm_automatic_run>:
 *      Author: Vostro
 */

#include "fsm_automatic.h"
#include "traffic.h"
void fsm_automatic_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status) {
 8000150:	4b71      	ldr	r3, [pc, #452]	; (8000318 <fsm_automatic_run+0x1cc>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b07      	cmp	r3, #7
 8000158:	f200 80d2 	bhi.w	8000300 <fsm_automatic_run+0x1b4>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000185 	.word	0x08000185
 8000168:	08000301 	.word	0x08000301
 800016c:	08000301 	.word	0x08000301
 8000170:	08000301 	.word	0x08000301
 8000174:	080001af 	.word	0x080001af
 8000178:	08000203 	.word	0x08000203
 800017c:	08000259 	.word	0x08000259
 8000180:	080002ab 	.word	0x080002ab
	case INIT:
		setTimer1(100);
 8000184:	2064      	movs	r0, #100	; 0x64
 8000186:	f001 f917 	bl	80013b8 <setTimer1>
		setcolor1(AUTO_RED);
 800018a:	2002      	movs	r0, #2
 800018c:	f001 fa48 	bl	8001620 <setcolor1>
		setcolor2(AUTO_GREEN);
 8000190:	2003      	movs	r0, #3
 8000192:	f001 faa1 	bl	80016d8 <setcolor2>
		counter1=red;
 8000196:	4b61      	ldr	r3, [pc, #388]	; (800031c <fsm_automatic_run+0x1d0>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a61      	ldr	r2, [pc, #388]	; (8000320 <fsm_automatic_run+0x1d4>)
 800019c:	6013      	str	r3, [r2, #0]
		counter2=green;
 800019e:	4b61      	ldr	r3, [pc, #388]	; (8000324 <fsm_automatic_run+0x1d8>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a61      	ldr	r2, [pc, #388]	; (8000328 <fsm_automatic_run+0x1dc>)
 80001a4:	6013      	str	r3, [r2, #0]
		status=RED_GREEN;
 80001a6:	4b5c      	ldr	r3, [pc, #368]	; (8000318 <fsm_automatic_run+0x1cc>)
 80001a8:	2205      	movs	r2, #5
 80001aa:	601a      	str	r2, [r3, #0]
		break;
 80001ac:	e0b1      	b.n	8000312 <fsm_automatic_run+0x1c6>
	case RED_GREEN:
		if (timer1_flag==1) {
 80001ae:	4b5f      	ldr	r3, [pc, #380]	; (800032c <fsm_automatic_run+0x1e0>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	f040 80a6 	bne.w	8000304 <fsm_automatic_run+0x1b8>
			if (counter2==1) {
 80001b8:	4b5b      	ldr	r3, [pc, #364]	; (8000328 <fsm_automatic_run+0x1dc>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d112      	bne.n	80001e6 <fsm_automatic_run+0x9a>
				status=RED_YELLOW;
 80001c0:	4b55      	ldr	r3, [pc, #340]	; (8000318 <fsm_automatic_run+0x1cc>)
 80001c2:	2206      	movs	r2, #6
 80001c4:	601a      	str	r2, [r3, #0]
				counter1--;
 80001c6:	4b56      	ldr	r3, [pc, #344]	; (8000320 <fsm_automatic_run+0x1d4>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	4a54      	ldr	r2, [pc, #336]	; (8000320 <fsm_automatic_run+0x1d4>)
 80001ce:	6013      	str	r3, [r2, #0]
				counter2=yellow;
 80001d0:	4b57      	ldr	r3, [pc, #348]	; (8000330 <fsm_automatic_run+0x1e4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a54      	ldr	r2, [pc, #336]	; (8000328 <fsm_automatic_run+0x1dc>)
 80001d6:	6013      	str	r3, [r2, #0]
				setcolor2(AUTO_YELLOW);
 80001d8:	2004      	movs	r0, #4
 80001da:	f001 fa7d 	bl	80016d8 <setcolor2>
				setTimer1(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f001 f8ea 	bl	80013b8 <setTimer1>
				counter1--;
				counter2--;
				setTimer1(100);
			}
		}
		break;
 80001e4:	e08e      	b.n	8000304 <fsm_automatic_run+0x1b8>
				counter1--;
 80001e6:	4b4e      	ldr	r3, [pc, #312]	; (8000320 <fsm_automatic_run+0x1d4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	3b01      	subs	r3, #1
 80001ec:	4a4c      	ldr	r2, [pc, #304]	; (8000320 <fsm_automatic_run+0x1d4>)
 80001ee:	6013      	str	r3, [r2, #0]
				counter2--;
 80001f0:	4b4d      	ldr	r3, [pc, #308]	; (8000328 <fsm_automatic_run+0x1dc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	4a4c      	ldr	r2, [pc, #304]	; (8000328 <fsm_automatic_run+0x1dc>)
 80001f8:	6013      	str	r3, [r2, #0]
				setTimer1(100);
 80001fa:	2064      	movs	r0, #100	; 0x64
 80001fc:	f001 f8dc 	bl	80013b8 <setTimer1>
		break;
 8000200:	e080      	b.n	8000304 <fsm_automatic_run+0x1b8>
	case RED_YELLOW:
		if (timer1_flag==1) {
 8000202:	4b4a      	ldr	r3, [pc, #296]	; (800032c <fsm_automatic_run+0x1e0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d17e      	bne.n	8000308 <fsm_automatic_run+0x1bc>
			if (counter1==1) {
 800020a:	4b45      	ldr	r3, [pc, #276]	; (8000320 <fsm_automatic_run+0x1d4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d114      	bne.n	800023c <fsm_automatic_run+0xf0>
				status=GREEN_RED;
 8000212:	4b41      	ldr	r3, [pc, #260]	; (8000318 <fsm_automatic_run+0x1cc>)
 8000214:	2207      	movs	r2, #7
 8000216:	601a      	str	r2, [r3, #0]
				counter1=green;
 8000218:	4b42      	ldr	r3, [pc, #264]	; (8000324 <fsm_automatic_run+0x1d8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a40      	ldr	r2, [pc, #256]	; (8000320 <fsm_automatic_run+0x1d4>)
 800021e:	6013      	str	r3, [r2, #0]
				counter2=red;
 8000220:	4b3e      	ldr	r3, [pc, #248]	; (800031c <fsm_automatic_run+0x1d0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a40      	ldr	r2, [pc, #256]	; (8000328 <fsm_automatic_run+0x1dc>)
 8000226:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_GREEN);
 8000228:	2003      	movs	r0, #3
 800022a:	f001 f9f9 	bl	8001620 <setcolor1>
				setcolor2(AUTO_RED);
 800022e:	2002      	movs	r0, #2
 8000230:	f001 fa52 	bl	80016d8 <setcolor2>
				setTimer1(100);
 8000234:	2064      	movs	r0, #100	; 0x64
 8000236:	f001 f8bf 	bl	80013b8 <setTimer1>
				counter1--;
				counter2--;
				setTimer1(100);
			}
		}
		break;
 800023a:	e065      	b.n	8000308 <fsm_automatic_run+0x1bc>
				counter1--;
 800023c:	4b38      	ldr	r3, [pc, #224]	; (8000320 <fsm_automatic_run+0x1d4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3b01      	subs	r3, #1
 8000242:	4a37      	ldr	r2, [pc, #220]	; (8000320 <fsm_automatic_run+0x1d4>)
 8000244:	6013      	str	r3, [r2, #0]
				counter2--;
 8000246:	4b38      	ldr	r3, [pc, #224]	; (8000328 <fsm_automatic_run+0x1dc>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	3b01      	subs	r3, #1
 800024c:	4a36      	ldr	r2, [pc, #216]	; (8000328 <fsm_automatic_run+0x1dc>)
 800024e:	6013      	str	r3, [r2, #0]
				setTimer1(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f001 f8b1 	bl	80013b8 <setTimer1>
		break;
 8000256:	e057      	b.n	8000308 <fsm_automatic_run+0x1bc>
	case GREEN_RED:
		if (timer1_flag==1) {
 8000258:	4b34      	ldr	r3, [pc, #208]	; (800032c <fsm_automatic_run+0x1e0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d155      	bne.n	800030c <fsm_automatic_run+0x1c0>
			if (counter1==1) {
 8000260:	4b2f      	ldr	r3, [pc, #188]	; (8000320 <fsm_automatic_run+0x1d4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d112      	bne.n	800028e <fsm_automatic_run+0x142>
				status=YELLOW_RED;
 8000268:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <fsm_automatic_run+0x1cc>)
 800026a:	2208      	movs	r2, #8
 800026c:	601a      	str	r2, [r3, #0]
				counter2--;
 800026e:	4b2e      	ldr	r3, [pc, #184]	; (8000328 <fsm_automatic_run+0x1dc>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <fsm_automatic_run+0x1dc>)
 8000276:	6013      	str	r3, [r2, #0]
				counter1=yellow;
 8000278:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <fsm_automatic_run+0x1e4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <fsm_automatic_run+0x1d4>)
 800027e:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_YELLOW);
 8000280:	2004      	movs	r0, #4
 8000282:	f001 f9cd 	bl	8001620 <setcolor1>
				setTimer1(100);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f001 f896 	bl	80013b8 <setTimer1>
				counter1--;
				counter2--;
				setTimer1(100);
			}
		}
		break;
 800028c:	e03e      	b.n	800030c <fsm_automatic_run+0x1c0>
				counter1--;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <fsm_automatic_run+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3b01      	subs	r3, #1
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <fsm_automatic_run+0x1d4>)
 8000296:	6013      	str	r3, [r2, #0]
				counter2--;
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <fsm_automatic_run+0x1dc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a22      	ldr	r2, [pc, #136]	; (8000328 <fsm_automatic_run+0x1dc>)
 80002a0:	6013      	str	r3, [r2, #0]
				setTimer1(100);
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f001 f888 	bl	80013b8 <setTimer1>
		break;
 80002a8:	e030      	b.n	800030c <fsm_automatic_run+0x1c0>
	case YELLOW_RED:
		if (timer1_flag==1) {
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <fsm_automatic_run+0x1e0>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d12e      	bne.n	8000310 <fsm_automatic_run+0x1c4>
			if (counter1==1) {
 80002b2:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <fsm_automatic_run+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d114      	bne.n	80002e4 <fsm_automatic_run+0x198>
				status=RED_GREEN;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <fsm_automatic_run+0x1cc>)
 80002bc:	2205      	movs	r2, #5
 80002be:	601a      	str	r2, [r3, #0]
				counter1=red;
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <fsm_automatic_run+0x1d0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <fsm_automatic_run+0x1d4>)
 80002c6:	6013      	str	r3, [r2, #0]
				counter2=green;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <fsm_automatic_run+0x1d8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a16      	ldr	r2, [pc, #88]	; (8000328 <fsm_automatic_run+0x1dc>)
 80002ce:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_RED);
 80002d0:	2002      	movs	r0, #2
 80002d2:	f001 f9a5 	bl	8001620 <setcolor1>
				setcolor2(AUTO_GREEN);
 80002d6:	2003      	movs	r0, #3
 80002d8:	f001 f9fe 	bl	80016d8 <setcolor2>
				setTimer1(100);
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f001 f86b 	bl	80013b8 <setTimer1>
				counter1--;
				counter2--;
				setTimer1(100);
			}
		}
		break;
 80002e2:	e015      	b.n	8000310 <fsm_automatic_run+0x1c4>
				counter1--;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <fsm_automatic_run+0x1d4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <fsm_automatic_run+0x1d4>)
 80002ec:	6013      	str	r3, [r2, #0]
				counter2--;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <fsm_automatic_run+0x1dc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <fsm_automatic_run+0x1dc>)
 80002f6:	6013      	str	r3, [r2, #0]
				setTimer1(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f001 f85d 	bl	80013b8 <setTimer1>
		break;
 80002fe:	e007      	b.n	8000310 <fsm_automatic_run+0x1c4>
	default:
		break;
 8000300:	bf00      	nop
 8000302:	e006      	b.n	8000312 <fsm_automatic_run+0x1c6>
		break;
 8000304:	bf00      	nop
 8000306:	e004      	b.n	8000312 <fsm_automatic_run+0x1c6>
		break;
 8000308:	bf00      	nop
 800030a:	e002      	b.n	8000312 <fsm_automatic_run+0x1c6>
		break;
 800030c:	bf00      	nop
 800030e:	e000      	b.n	8000312 <fsm_automatic_run+0x1c6>
		break;
 8000310:	bf00      	nop
	}
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000
 800031c:	2000000c 	.word	0x2000000c
 8000320:	20000004 	.word	0x20000004
 8000324:	20000014 	.word	0x20000014
 8000328:	20000008 	.word	0x20000008
 800032c:	2000006c 	.word	0x2000006c
 8000330:	20000010 	.word	0x20000010

08000334 <fsm_7SEG>:
//	default:
//		break;
//	}
//}

void fsm_7SEG() {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	switch(mode) {
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <fsm_7SEG+0x60>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d005      	beq.n	800034c <fsm_7SEG+0x18>
 8000340:	2b00      	cmp	r3, #0
 8000342:	dd22      	ble.n	800038a <fsm_7SEG+0x56>
 8000344:	3b02      	subs	r3, #2
 8000346:	2b02      	cmp	r3, #2
 8000348:	d81f      	bhi.n	800038a <fsm_7SEG+0x56>
 800034a:	e00f      	b.n	800036c <fsm_7SEG+0x38>
	case 1:
		if (timer4_flag==1) {
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <fsm_7SEG+0x64>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d11c      	bne.n	800038e <fsm_7SEG+0x5a>
			scan7SEG(counter1, counter2);
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <fsm_7SEG+0x68>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <fsm_7SEG+0x6c>)
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	4611      	mov	r1, r2
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fc66 	bl	8000c30 <scan7SEG>
			setTimer4(50);
 8000364:	2032      	movs	r0, #50	; 0x32
 8000366:	f001 f84f 	bl	8001408 <setTimer4>
		}
		break;
 800036a:	e010      	b.n	800038e <fsm_7SEG+0x5a>
	case 2:
	case 3:
	case 4:
		if (timer4_flag==1) {
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <fsm_7SEG+0x64>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d10a      	bne.n	800038a <fsm_7SEG+0x56>
			scan7SEG(tempt, mode);
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <fsm_7SEG+0x70>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <fsm_7SEG+0x60>)
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fc56 	bl	8000c30 <scan7SEG>
			setTimer4(50);
 8000384:	2032      	movs	r0, #50	; 0x32
 8000386:	f001 f83f 	bl	8001408 <setTimer4>
		}
	default:
		break;
 800038a:	bf00      	nop
 800038c:	e000      	b.n	8000390 <fsm_7SEG+0x5c>
		break;
 800038e:	bf00      	nop
	}
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000018 	.word	0x20000018
 8000398:	20000084 	.word	0x20000084
 800039c:	20000004 	.word	0x20000004
 80003a0:	20000008 	.word	0x20000008
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <check_button_flag>:
static	GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static	uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static	uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
int button_flag[NO_OF_BUTTONS];

int check_button_flag(int i) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <check_button_flag+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d106      	bne.n	80003ca <check_button_flag+0x22>
		button_flag[i] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <check_button_flag+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <check_button_flag+0x24>
	}
	return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000090 	.word	0x20000090

080003dc <button_reading>:

void button_reading(void) {
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	71fb      	strb	r3, [r7, #7]
 80003e6:	e087      	b.n	80004f8 <button_reading+0x11c>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80003e8:	79fa      	ldrb	r2, [r7, #7]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4947      	ldr	r1, [pc, #284]	; (800050c <button_reading+0x130>)
 80003ee:	5c89      	ldrb	r1, [r1, r2]
 80003f0:	4a47      	ldr	r2, [pc, #284]	; (8000510 <button_reading+0x134>)
 80003f2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80003f4:	79fa      	ldrb	r2, [r7, #7]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	4946      	ldr	r1, [pc, #280]	; (8000514 <button_reading+0x138>)
 80003fa:	5c89      	ldrb	r1, [r1, r2]
 80003fc:	4a43      	ldr	r2, [pc, #268]	; (800050c <button_reading+0x130>)
 80003fe:	54d1      	strb	r1, [r2, r3]
		switch (i) {
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2b02      	cmp	r3, #2
 8000404:	d01c      	beq.n	8000440 <button_reading+0x64>
 8000406:	2b02      	cmp	r3, #2
 8000408:	dc25      	bgt.n	8000456 <button_reading+0x7a>
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <button_reading+0x38>
 800040e:	2b01      	cmp	r3, #1
 8000410:	d00b      	beq.n	800042a <button_reading+0x4e>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
				break;
			default:
				break;
 8000412:	e020      	b.n	8000456 <button_reading+0x7a>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000414:	79fc      	ldrb	r4, [r7, #7]
 8000416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041a:	483f      	ldr	r0, [pc, #252]	; (8000518 <button_reading+0x13c>)
 800041c:	f001 fcfc 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <button_reading+0x138>)
 8000426:	551a      	strb	r2, [r3, r4]
				break;
 8000428:	e016      	b.n	8000458 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800042a:	79fc      	ldrb	r4, [r7, #7]
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4839      	ldr	r0, [pc, #228]	; (8000518 <button_reading+0x13c>)
 8000432:	f001 fcf1 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000436:	4603      	mov	r3, r0
 8000438:	461a      	mov	r2, r3
 800043a:	4b36      	ldr	r3, [pc, #216]	; (8000514 <button_reading+0x138>)
 800043c:	551a      	strb	r2, [r3, r4]
				break;
 800043e:	e00b      	b.n	8000458 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000440:	79fc      	ldrb	r4, [r7, #7]
 8000442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000446:	4834      	ldr	r0, [pc, #208]	; (8000518 <button_reading+0x13c>)
 8000448:	f001 fce6 	bl	8001e18 <HAL_GPIO_ReadPin>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	4b30      	ldr	r3, [pc, #192]	; (8000514 <button_reading+0x138>)
 8000452:	551a      	strb	r2, [r3, r4]
				break;
 8000454:	e000      	b.n	8000458 <button_reading+0x7c>
				break;
 8000456:	bf00      	nop
		}
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4a2e      	ldr	r2, [pc, #184]	; (8000514 <button_reading+0x138>)
 800045c:	5cd2      	ldrb	r2, [r2, r3]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	492a      	ldr	r1, [pc, #168]	; (800050c <button_reading+0x130>)
 8000462:	5ccb      	ldrb	r3, [r1, r3]
 8000464:	429a      	cmp	r2, r3
 8000466:	d11c      	bne.n	80004a2 <button_reading+0xc6>
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a2a      	ldr	r2, [pc, #168]	; (8000514 <button_reading+0x138>)
 800046c:	5cd2      	ldrb	r2, [r2, r3]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4927      	ldr	r1, [pc, #156]	; (8000510 <button_reading+0x134>)
 8000472:	5ccb      	ldrb	r3, [r1, r3]
 8000474:	429a      	cmp	r2, r3
 8000476:	d114      	bne.n	80004a2 <button_reading+0xc6>
			if (buttonBuffer[i] == BUTTON_IS_RELEASED && debounceButtonBuffer1[i] == BUTTON_IS_PRESSED) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a28      	ldr	r2, [pc, #160]	; (800051c <button_reading+0x140>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d109      	bne.n	8000496 <button_reading+0xba>
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4a23      	ldr	r2, [pc, #140]	; (8000514 <button_reading+0x138>)
 8000486:	5cd3      	ldrb	r3, [r2, r3]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d104      	bne.n	8000496 <button_reading+0xba>
				button_flag[i] = 1;
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4a24      	ldr	r2, [pc, #144]	; (8000520 <button_reading+0x144>)
 8000490:	2101      	movs	r1, #1
 8000492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	491e      	ldr	r1, [pc, #120]	; (8000514 <button_reading+0x138>)
 800049c:	5c89      	ldrb	r1, [r1, r2]
 800049e:	4a1f      	ldr	r2, [pc, #124]	; (800051c <button_reading+0x140>)
 80004a0:	54d1      	strb	r1, [r2, r3]
		}
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	; (800051c <button_reading+0x140>)
 80004a6:	5cd3      	ldrb	r3, [r2, r3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d114      	bne.n	80004d6 <button_reading+0xfa>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <button_reading+0x148>)
 80004b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b4:	2b63      	cmp	r3, #99	; 0x63
 80004b6:	d809      	bhi.n	80004cc <button_reading+0xf0>
				counterForButtonPress1s[i]++;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <button_reading+0x148>)
 80004bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004c0:	3201      	adds	r2, #1
 80004c2:	b291      	uxth	r1, r2
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <button_reading+0x148>)
 80004c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80004ca:	e012      	b.n	80004f2 <button_reading+0x116>
			} else {
				flagForButtonPress1s[i] = 1;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4a16      	ldr	r2, [pc, #88]	; (8000528 <button_reading+0x14c>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	54d1      	strb	r1, [r2, r3]
 80004d4:	e00d      	b.n	80004f2 <button_reading+0x116>
			}
		} else {
			button_flag[i] = 0;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <button_reading+0x144>)
 80004da:	2100      	movs	r1, #0
 80004dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[i] = 0;
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4a10      	ldr	r2, [pc, #64]	; (8000524 <button_reading+0x148>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <button_reading+0x14c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	54d1      	strb	r1, [r2, r3]
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3301      	adds	r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	f67f af74 	bls.w	80003e8 <button_reading+0xc>
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	20000054 	.word	0x20000054
 8000510:	20000058 	.word	0x20000058
 8000514:	20000050 	.word	0x20000050
 8000518:	40010800 	.word	0x40010800
 800051c:	2000004c 	.word	0x2000004c
 8000520:	20000090 	.word	0x20000090
 8000524:	20000060 	.word	0x20000060
 8000528:	2000005c 	.word	0x2000005c

0800052c <is_button_pressed_1s>:
unsigned char is_button_pressed(uint8_t index) {
	if (index >= NO_OF_BUTTONS) return 0;
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
}

unsigned char is_button_pressed_1s(unsigned char index) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0xff;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d901      	bls.n	8000540 <is_button_pressed_1s+0x14>
 800053c:	23ff      	movs	r3, #255	; 0xff
 800053e:	e007      	b.n	8000550 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <is_button_pressed_1s+0x30>)
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	2b01      	cmp	r3, #1
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000005c 	.word	0x2000005c

08000560 <display7SEG>:
void display7SEG(int counter) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d123      	bne.n	80005b6 <display7SEG+0x56>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2101      	movs	r1, #1
 8000572:	48c2      	ldr	r0, [pc, #776]	; (800087c <display7SEG+0x31c>)
 8000574:	f001 fc67 	bl	8001e46 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2102      	movs	r1, #2
 800057c:	48bf      	ldr	r0, [pc, #764]	; (800087c <display7SEG+0x31c>)
 800057e:	f001 fc62 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2104      	movs	r1, #4
 8000586:	48bd      	ldr	r0, [pc, #756]	; (800087c <display7SEG+0x31c>)
 8000588:	f001 fc5d 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	48ba      	ldr	r0, [pc, #744]	; (800087c <display7SEG+0x31c>)
 8000592:	f001 fc58 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	48b8      	ldr	r0, [pc, #736]	; (800087c <display7SEG+0x31c>)
 800059c:	f001 fc53 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	48b5      	ldr	r0, [pc, #724]	; (800087c <display7SEG+0x31c>)
 80005a6:	f001 fc4e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	48b3      	ldr	r0, [pc, #716]	; (800087c <display7SEG+0x31c>)
 80005b0:	f001 fc49 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
	}
}
 80005b4:	e15d      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 1) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d123      	bne.n	8000604 <display7SEG+0xa4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	48ae      	ldr	r0, [pc, #696]	; (800087c <display7SEG+0x31c>)
 80005c2:	f001 fc40 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	48ac      	ldr	r0, [pc, #688]	; (800087c <display7SEG+0x31c>)
 80005cc:	f001 fc3b 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2104      	movs	r1, #4
 80005d4:	48a9      	ldr	r0, [pc, #676]	; (800087c <display7SEG+0x31c>)
 80005d6:	f001 fc36 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2108      	movs	r1, #8
 80005de:	48a7      	ldr	r0, [pc, #668]	; (800087c <display7SEG+0x31c>)
 80005e0:	f001 fc31 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	48a4      	ldr	r0, [pc, #656]	; (800087c <display7SEG+0x31c>)
 80005ea:	f001 fc2c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2110      	movs	r1, #16
 80005f2:	48a2      	ldr	r0, [pc, #648]	; (800087c <display7SEG+0x31c>)
 80005f4:	f001 fc27 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	489f      	ldr	r0, [pc, #636]	; (800087c <display7SEG+0x31c>)
 80005fe:	f001 fc22 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000602:	e136      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 2) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d123      	bne.n	8000652 <display7SEG+0xf2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	489b      	ldr	r0, [pc, #620]	; (800087c <display7SEG+0x31c>)
 8000610:	f001 fc19 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	4898      	ldr	r0, [pc, #608]	; (800087c <display7SEG+0x31c>)
 800061a:	f001 fc14 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	4896      	ldr	r0, [pc, #600]	; (800087c <display7SEG+0x31c>)
 8000624:	f001 fc0f 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	4893      	ldr	r0, [pc, #588]	; (800087c <display7SEG+0x31c>)
 800062e:	f001 fc0a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4891      	ldr	r0, [pc, #580]	; (800087c <display7SEG+0x31c>)
 8000638:	f001 fc05 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	488e      	ldr	r0, [pc, #568]	; (800087c <display7SEG+0x31c>)
 8000642:	f001 fc00 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	488c      	ldr	r0, [pc, #560]	; (800087c <display7SEG+0x31c>)
 800064c:	f001 fbfb 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000650:	e10f      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 3) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d123      	bne.n	80006a0 <display7SEG+0x140>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2102      	movs	r1, #2
 800065c:	4887      	ldr	r0, [pc, #540]	; (800087c <display7SEG+0x31c>)
 800065e:	f001 fbf2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	4885      	ldr	r0, [pc, #532]	; (800087c <display7SEG+0x31c>)
 8000668:	f001 fbed 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2101      	movs	r1, #1
 8000670:	4882      	ldr	r0, [pc, #520]	; (800087c <display7SEG+0x31c>)
 8000672:	f001 fbe8 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	4880      	ldr	r0, [pc, #512]	; (800087c <display7SEG+0x31c>)
 800067c:	f001 fbe3 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	487d      	ldr	r0, [pc, #500]	; (800087c <display7SEG+0x31c>)
 8000686:	f001 fbde 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	487b      	ldr	r0, [pc, #492]	; (800087c <display7SEG+0x31c>)
 8000690:	f001 fbd9 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4878      	ldr	r0, [pc, #480]	; (800087c <display7SEG+0x31c>)
 800069a:	f001 fbd4 	bl	8001e46 <HAL_GPIO_WritePin>
}
 800069e:	e0e8      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 4) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d123      	bne.n	80006ee <display7SEG+0x18e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2104      	movs	r1, #4
 80006aa:	4874      	ldr	r0, [pc, #464]	; (800087c <display7SEG+0x31c>)
 80006ac:	f001 fbcb 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2108      	movs	r1, #8
 80006b4:	4871      	ldr	r0, [pc, #452]	; (800087c <display7SEG+0x31c>)
 80006b6:	f001 fbc6 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	486f      	ldr	r0, [pc, #444]	; (800087c <display7SEG+0x31c>)
 80006c0:	f001 fbc1 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	486c      	ldr	r0, [pc, #432]	; (800087c <display7SEG+0x31c>)
 80006ca:	f001 fbbc 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	486a      	ldr	r0, [pc, #424]	; (800087c <display7SEG+0x31c>)
 80006d4:	f001 fbb7 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2110      	movs	r1, #16
 80006dc:	4867      	ldr	r0, [pc, #412]	; (800087c <display7SEG+0x31c>)
 80006de:	f001 fbb2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	4865      	ldr	r0, [pc, #404]	; (800087c <display7SEG+0x31c>)
 80006e8:	f001 fbad 	bl	8001e46 <HAL_GPIO_WritePin>
}
 80006ec:	e0c1      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 5) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d123      	bne.n	800073c <display7SEG+0x1dc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	4860      	ldr	r0, [pc, #384]	; (800087c <display7SEG+0x31c>)
 80006fa:	f001 fba4 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2120      	movs	r1, #32
 8000702:	485e      	ldr	r0, [pc, #376]	; (800087c <display7SEG+0x31c>)
 8000704:	f001 fb9f 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2101      	movs	r1, #1
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <display7SEG+0x31c>)
 800070e:	f001 fb9a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2102      	movs	r1, #2
 8000716:	4859      	ldr	r0, [pc, #356]	; (800087c <display7SEG+0x31c>)
 8000718:	f001 fb95 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	4856      	ldr	r0, [pc, #344]	; (800087c <display7SEG+0x31c>)
 8000722:	f001 fb90 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4854      	ldr	r0, [pc, #336]	; (800087c <display7SEG+0x31c>)
 800072c:	f001 fb8b 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	4851      	ldr	r0, [pc, #324]	; (800087c <display7SEG+0x31c>)
 8000736:	f001 fb86 	bl	8001e46 <HAL_GPIO_WritePin>
}
 800073a:	e09a      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 6) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b06      	cmp	r3, #6
 8000740:	d123      	bne.n	800078a <display7SEG+0x22a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2120      	movs	r1, #32
 8000746:	484d      	ldr	r0, [pc, #308]	; (800087c <display7SEG+0x31c>)
 8000748:	f001 fb7d 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2101      	movs	r1, #1
 8000750:	484a      	ldr	r0, [pc, #296]	; (800087c <display7SEG+0x31c>)
 8000752:	f001 fb78 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	4848      	ldr	r0, [pc, #288]	; (800087c <display7SEG+0x31c>)
 800075c:	f001 fb73 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2104      	movs	r1, #4
 8000764:	4845      	ldr	r0, [pc, #276]	; (800087c <display7SEG+0x31c>)
 8000766:	f001 fb6e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	4843      	ldr	r0, [pc, #268]	; (800087c <display7SEG+0x31c>)
 8000770:	f001 fb69 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2110      	movs	r1, #16
 8000778:	4840      	ldr	r0, [pc, #256]	; (800087c <display7SEG+0x31c>)
 800077a:	f001 fb64 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <display7SEG+0x31c>)
 8000784:	f001 fb5f 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000788:	e073      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 7) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d123      	bne.n	80007d8 <display7SEG+0x278>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4839      	ldr	r0, [pc, #228]	; (800087c <display7SEG+0x31c>)
 8000796:	f001 fb56 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2102      	movs	r1, #2
 800079e:	4837      	ldr	r0, [pc, #220]	; (800087c <display7SEG+0x31c>)
 80007a0:	f001 fb51 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2104      	movs	r1, #4
 80007a8:	4834      	ldr	r0, [pc, #208]	; (800087c <display7SEG+0x31c>)
 80007aa:	f001 fb4c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4832      	ldr	r0, [pc, #200]	; (800087c <display7SEG+0x31c>)
 80007b4:	f001 fb47 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2110      	movs	r1, #16
 80007bc:	482f      	ldr	r0, [pc, #188]	; (800087c <display7SEG+0x31c>)
 80007be:	f001 fb42 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	482d      	ldr	r0, [pc, #180]	; (800087c <display7SEG+0x31c>)
 80007c8:	f001 fb3d 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	482a      	ldr	r0, [pc, #168]	; (800087c <display7SEG+0x31c>)
 80007d2:	f001 fb38 	bl	8001e46 <HAL_GPIO_WritePin>
}
 80007d6:	e04c      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 8) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d123      	bne.n	8000826 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2101      	movs	r1, #1
 80007e2:	4826      	ldr	r0, [pc, #152]	; (800087c <display7SEG+0x31c>)
 80007e4:	f001 fb2f 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <display7SEG+0x31c>)
 80007ee:	f001 fb2a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2104      	movs	r1, #4
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <display7SEG+0x31c>)
 80007f8:	f001 fb25 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2108      	movs	r1, #8
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <display7SEG+0x31c>)
 8000802:	f001 fb20 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2110      	movs	r1, #16
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <display7SEG+0x31c>)
 800080c:	f001 fb1b 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4819      	ldr	r0, [pc, #100]	; (800087c <display7SEG+0x31c>)
 8000816:	f001 fb16 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <display7SEG+0x31c>)
 8000820:	f001 fb11 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000824:	e025      	b.n	8000872 <display7SEG+0x312>
	} else if (counter == 9) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b09      	cmp	r3, #9
 800082a:	d122      	bne.n	8000872 <display7SEG+0x312>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2104      	movs	r1, #4
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <display7SEG+0x31c>)
 8000832:	f001 fb08 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2101      	movs	r1, #1
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <display7SEG+0x31c>)
 800083c:	f001 fb03 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <display7SEG+0x31c>)
 8000846:	f001 fafe 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <display7SEG+0x31c>)
 8000850:	f001 faf9 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <display7SEG+0x31c>)
 800085a:	f001 faf4 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <display7SEG+0x31c>)
 8000864:	f001 faef 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <display7SEG+0x31c>)
 800086e:	f001 faea 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00

08000880 <display7SEG_2>:

void display7SEG_2(int counter) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d12a      	bne.n	80008e4 <display7SEG_2+0x64>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	48cb      	ldr	r0, [pc, #812]	; (8000bc4 <display7SEG_2+0x344>)
 8000896:	f001 fad6 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	48c8      	ldr	r0, [pc, #800]	; (8000bc4 <display7SEG_2+0x344>)
 80008a2:	f001 fad0 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ac:	48c5      	ldr	r0, [pc, #788]	; (8000bc4 <display7SEG_2+0x344>)
 80008ae:	f001 faca 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	48c2      	ldr	r0, [pc, #776]	; (8000bc4 <display7SEG_2+0x344>)
 80008ba:	f001 fac4 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	48bf      	ldr	r0, [pc, #764]	; (8000bc4 <display7SEG_2+0x344>)
 80008c6:	f001 fabe 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	48bc      	ldr	r0, [pc, #752]	; (8000bc4 <display7SEG_2+0x344>)
 80008d2:	f001 fab8 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	48b9      	ldr	r0, [pc, #740]	; (8000bc4 <display7SEG_2+0x344>)
 80008de:	f001 fab2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
	}
}
 80008e2:	e19e      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d12a      	bne.n	8000940 <display7SEG_2+0xc0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f0:	48b4      	ldr	r0, [pc, #720]	; (8000bc4 <display7SEG_2+0x344>)
 80008f2:	f001 faa8 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fc:	48b1      	ldr	r0, [pc, #708]	; (8000bc4 <display7SEG_2+0x344>)
 80008fe:	f001 faa2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000908:	48ae      	ldr	r0, [pc, #696]	; (8000bc4 <display7SEG_2+0x344>)
 800090a:	f001 fa9c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	48ab      	ldr	r0, [pc, #684]	; (8000bc4 <display7SEG_2+0x344>)
 8000916:	f001 fa96 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000920:	48a8      	ldr	r0, [pc, #672]	; (8000bc4 <display7SEG_2+0x344>)
 8000922:	f001 fa90 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	48a5      	ldr	r0, [pc, #660]	; (8000bc4 <display7SEG_2+0x344>)
 800092e:	f001 fa8a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000938:	48a2      	ldr	r0, [pc, #648]	; (8000bc4 <display7SEG_2+0x344>)
 800093a:	f001 fa84 	bl	8001e46 <HAL_GPIO_WritePin>
}
 800093e:	e170      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 2) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d12a      	bne.n	800099c <display7SEG_2+0x11c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	489d      	ldr	r0, [pc, #628]	; (8000bc4 <display7SEG_2+0x344>)
 800094e:	f001 fa7a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	489a      	ldr	r0, [pc, #616]	; (8000bc4 <display7SEG_2+0x344>)
 800095a:	f001 fa74 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	4897      	ldr	r0, [pc, #604]	; (8000bc4 <display7SEG_2+0x344>)
 8000966:	f001 fa6e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	4894      	ldr	r0, [pc, #592]	; (8000bc4 <display7SEG_2+0x344>)
 8000972:	f001 fa68 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	4891      	ldr	r0, [pc, #580]	; (8000bc4 <display7SEG_2+0x344>)
 800097e:	f001 fa62 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000988:	488e      	ldr	r0, [pc, #568]	; (8000bc4 <display7SEG_2+0x344>)
 800098a:	f001 fa5c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000994:	488b      	ldr	r0, [pc, #556]	; (8000bc4 <display7SEG_2+0x344>)
 8000996:	f001 fa56 	bl	8001e46 <HAL_GPIO_WritePin>
}
 800099a:	e142      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 3) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d12a      	bne.n	80009f8 <display7SEG_2+0x178>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	4886      	ldr	r0, [pc, #536]	; (8000bc4 <display7SEG_2+0x344>)
 80009aa:	f001 fa4c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b4:	4883      	ldr	r0, [pc, #524]	; (8000bc4 <display7SEG_2+0x344>)
 80009b6:	f001 fa46 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c0:	4880      	ldr	r0, [pc, #512]	; (8000bc4 <display7SEG_2+0x344>)
 80009c2:	f001 fa40 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	487d      	ldr	r0, [pc, #500]	; (8000bc4 <display7SEG_2+0x344>)
 80009ce:	f001 fa3a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	487a      	ldr	r0, [pc, #488]	; (8000bc4 <display7SEG_2+0x344>)
 80009da:	f001 fa34 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	4877      	ldr	r0, [pc, #476]	; (8000bc4 <display7SEG_2+0x344>)
 80009e6:	f001 fa2e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f0:	4874      	ldr	r0, [pc, #464]	; (8000bc4 <display7SEG_2+0x344>)
 80009f2:	f001 fa28 	bl	8001e46 <HAL_GPIO_WritePin>
}
 80009f6:	e114      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 4) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d12a      	bne.n	8000a54 <display7SEG_2+0x1d4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	486f      	ldr	r0, [pc, #444]	; (8000bc4 <display7SEG_2+0x344>)
 8000a06:	f001 fa1e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a10:	486c      	ldr	r0, [pc, #432]	; (8000bc4 <display7SEG_2+0x344>)
 8000a12:	f001 fa18 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	4869      	ldr	r0, [pc, #420]	; (8000bc4 <display7SEG_2+0x344>)
 8000a1e:	f001 fa12 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a28:	4866      	ldr	r0, [pc, #408]	; (8000bc4 <display7SEG_2+0x344>)
 8000a2a:	f001 fa0c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	4863      	ldr	r0, [pc, #396]	; (8000bc4 <display7SEG_2+0x344>)
 8000a36:	f001 fa06 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	4860      	ldr	r0, [pc, #384]	; (8000bc4 <display7SEG_2+0x344>)
 8000a42:	f001 fa00 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	485d      	ldr	r0, [pc, #372]	; (8000bc4 <display7SEG_2+0x344>)
 8000a4e:	f001 f9fa 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000a52:	e0e6      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 5) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b05      	cmp	r3, #5
 8000a58:	d12a      	bne.n	8000ab0 <display7SEG_2+0x230>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a60:	4858      	ldr	r0, [pc, #352]	; (8000bc4 <display7SEG_2+0x344>)
 8000a62:	f001 f9f0 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6c:	4855      	ldr	r0, [pc, #340]	; (8000bc4 <display7SEG_2+0x344>)
 8000a6e:	f001 f9ea 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4852      	ldr	r0, [pc, #328]	; (8000bc4 <display7SEG_2+0x344>)
 8000a7a:	f001 f9e4 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a84:	484f      	ldr	r0, [pc, #316]	; (8000bc4 <display7SEG_2+0x344>)
 8000a86:	f001 f9de 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	484c      	ldr	r0, [pc, #304]	; (8000bc4 <display7SEG_2+0x344>)
 8000a92:	f001 f9d8 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	4849      	ldr	r0, [pc, #292]	; (8000bc4 <display7SEG_2+0x344>)
 8000a9e:	f001 f9d2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa8:	4846      	ldr	r0, [pc, #280]	; (8000bc4 <display7SEG_2+0x344>)
 8000aaa:	f001 f9cc 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000aae:	e0b8      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 6) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d12a      	bne.n	8000b0c <display7SEG_2+0x28c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abc:	4841      	ldr	r0, [pc, #260]	; (8000bc4 <display7SEG_2+0x344>)
 8000abe:	f001 f9c2 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <display7SEG_2+0x344>)
 8000aca:	f001 f9bc 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	483b      	ldr	r0, [pc, #236]	; (8000bc4 <display7SEG_2+0x344>)
 8000ad6:	f001 f9b6 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	4838      	ldr	r0, [pc, #224]	; (8000bc4 <display7SEG_2+0x344>)
 8000ae2:	f001 f9b0 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <display7SEG_2+0x344>)
 8000aee:	f001 f9aa 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4832      	ldr	r0, [pc, #200]	; (8000bc4 <display7SEG_2+0x344>)
 8000afa:	f001 f9a4 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <display7SEG_2+0x344>)
 8000b06:	f001 f99e 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000b0a:	e08a      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 7) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d12a      	bne.n	8000b68 <display7SEG_2+0x2e8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	482a      	ldr	r0, [pc, #168]	; (8000bc4 <display7SEG_2+0x344>)
 8000b1a:	f001 f994 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <display7SEG_2+0x344>)
 8000b26:	f001 f98e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b30:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <display7SEG_2+0x344>)
 8000b32:	f001 f988 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3c:	4821      	ldr	r0, [pc, #132]	; (8000bc4 <display7SEG_2+0x344>)
 8000b3e:	f001 f982 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b48:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <display7SEG_2+0x344>)
 8000b4a:	f001 f97c 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <display7SEG_2+0x344>)
 8000b56:	f001 f976 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b60:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <display7SEG_2+0x344>)
 8000b62:	f001 f970 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000b66:	e05c      	b.n	8000c22 <display7SEG_2+0x3a2>
	} else if (counter == 8) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d12c      	bne.n	8000bc8 <display7SEG_2+0x348>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <display7SEG_2+0x344>)
 8000b76:	f001 f966 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <display7SEG_2+0x344>)
 8000b82:	f001 f960 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <display7SEG_2+0x344>)
 8000b8e:	f001 f95a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <display7SEG_2+0x344>)
 8000b9a:	f001 f954 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <display7SEG_2+0x344>)
 8000ba6:	f001 f94e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <display7SEG_2+0x344>)
 8000bb2:	f001 f948 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbc:	4801      	ldr	r0, [pc, #4]	; (8000bc4 <display7SEG_2+0x344>)
 8000bbe:	f001 f942 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000bc2:	e02e      	b.n	8000c22 <display7SEG_2+0x3a2>
 8000bc4:	40010c00 	.word	0x40010c00
	} else if (counter == 9) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	d129      	bne.n	8000c22 <display7SEG_2+0x3a2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <display7SEG_2+0x3ac>)
 8000bd6:	f001 f936 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <display7SEG_2+0x3ac>)
 8000be2:	f001 f930 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <display7SEG_2+0x3ac>)
 8000bee:	f001 f92a 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <display7SEG_2+0x3ac>)
 8000bfa:	f001 f924 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <display7SEG_2+0x3ac>)
 8000c06:	f001 f91e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <display7SEG_2+0x3ac>)
 8000c12:	f001 f918 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <display7SEG_2+0x3ac>)
 8000c1e:	f001 f912 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <scan7SEG>:

int state7SEG=1;
void scan7SEG(int counter1, int counter2) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	int one=counter1/10;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <scan7SEG+0xc8>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	1092      	asrs	r2, r2, #2
 8000c44:	17db      	asrs	r3, r3, #31
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	617b      	str	r3, [r7, #20]
	int two=counter1%10;
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <scan7SEG+0xc8>)
 8000c4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c52:	1099      	asrs	r1, r3, #2
 8000c54:	17d3      	asrs	r3, r2, #31
 8000c56:	1ac9      	subs	r1, r1, r3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	613b      	str	r3, [r7, #16]

	int three=counter2/10;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <scan7SEG+0xc8>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1092      	asrs	r2, r2, #2
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]
	int four=counter2%10;
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <scan7SEG+0xc8>)
 8000c78:	fb83 1302 	smull	r1, r3, r3, r2
 8000c7c:	1099      	asrs	r1, r3, #2
 8000c7e:	17d3      	asrs	r3, r2, #31
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	460b      	mov	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	60bb      	str	r3, [r7, #8]

	switch(state7SEG) {
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <scan7SEG+0xcc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d002      	beq.n	8000c9c <scan7SEG+0x6c>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d015      	beq.n	8000cc6 <scan7SEG+0x96>
		display7SEG(one);
		display7SEG_2(three);
		state7SEG=1;
		break;
	default:
		break;
 8000c9a:	e029      	b.n	8000cf0 <scan7SEG+0xc0>
		HAL_GPIO_WritePin(PA7_GPIO_Port,PA7_Pin,SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <scan7SEG+0xd0>)
 8000ca2:	f001 f8d0 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port,PA8_Pin,RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cac:	4814      	ldr	r0, [pc, #80]	; (8000d00 <scan7SEG+0xd0>)
 8000cae:	f001 f8ca 	bl	8001e46 <HAL_GPIO_WritePin>
		display7SEG(two);
 8000cb2:	6938      	ldr	r0, [r7, #16]
 8000cb4:	f7ff fc54 	bl	8000560 <display7SEG>
		display7SEG_2(four);
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f7ff fde1 	bl	8000880 <display7SEG_2>
		state7SEG=2;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <scan7SEG+0xcc>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	601a      	str	r2, [r3, #0]
		break;
 8000cc4:	e014      	b.n	8000cf0 <scan7SEG+0xc0>
		HAL_GPIO_WritePin(PA7_GPIO_Port,PA7_Pin,RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <scan7SEG+0xd0>)
 8000ccc:	f001 f8bb 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port,PA8_Pin,SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <scan7SEG+0xd0>)
 8000cd8:	f001 f8b5 	bl	8001e46 <HAL_GPIO_WritePin>
		display7SEG(one);
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff fc3f 	bl	8000560 <display7SEG>
		display7SEG_2(three);
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fdcc 	bl	8000880 <display7SEG_2>
		state7SEG=1;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <scan7SEG+0xcc>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
		break;
 8000cee:	bf00      	nop
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	66666667 	.word	0x66666667
 8000cfc:	20000020 	.word	0x20000020
 8000d00:	40010800 	.word	0x40010800

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fd9c 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f816 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 f89c 	bl	8000e4c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d14:	f000 f84e 	bl	8000db4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <main+0x30>)
 8000d1a:	f001 fcf1 	bl	8002700 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status=INIT;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <main+0x34>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
  setTimer4(50);
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f000 fb6f 	bl	8001408 <setTimer4>
  while (1)
  {
    /* USER CODE END WHILE */
	fsm_mode();
 8000d2a:	f000 f905 	bl	8000f38 <fsm_mode>
	fsm_7SEG();
 8000d2e:	f7ff fb01 	bl	8000334 <fsm_7SEG>
	fsm_mode();
 8000d32:	e7fa      	b.n	8000d2a <main+0x26>
 8000d34:	2000009c 	.word	0x2000009c
 8000d38:	20000000 	.word	0x20000000

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 f894 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d66:	2310      	movs	r3, #16
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f898 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f8d5 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fb04 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000da6:	f000 f8c1 	bl	8000f2c <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000de8:	220a      	movs	r2, #10
 8000dea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dfa:	f001 fc31 	bl	8002660 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e04:	f000 f892 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000e16:	f001 fdc7 	bl	80029a8 <HAL_TIM_ConfigClockSource>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e20:	f000 f884 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000e32:	f001 ff93 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e3c:	f000 f876 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000009c 	.word	0x2000009c

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_GPIO_Init+0xbc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000e90:	2200      	movs	r2, #0
 8000e92:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <MX_GPIO_Init+0xc0>)
 8000e98:	f000 ffd5 	bl	8001e46 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <MX_GPIO_Init+0xc4>)
 8000ea4:	f000 ffcf 	bl	8001e46 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin PA7_Pin PA8_Pin
                           PA9_Pin PA10_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000ea8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000eac:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xc0>)
 8000ec2:	f000 fe2f 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ec6:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8000eca:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0xc4>)
 8000ee0:	f000 fe20 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000ee4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ee8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_GPIO_Init+0xc0>)
 8000efa:	f000 fe13 	bl	8001b24 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40010c00 	.word	0x40010c00

08000f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f1c:	f000 fa88 	bl	8001430 <timerRun>
	button_reading();
 8000f20:	f7ff fa5c 	bl	80003dc <button_reading>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <fsm_mode>:
 *      Author: Vostro
 */

#include "mode.h"

void fsm_mode() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f3c:	4bad      	ldr	r3, [pc, #692]	; (80011f4 <fsm_mode+0x2bc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	f200 821d 	bhi.w	8001382 <fsm_mode+0x44a>
 8000f48:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <fsm_mode+0x18>)
 8000f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4e:	bf00      	nop
 8000f50:	08000f61 	.word	0x08000f61
 8000f54:	08000fd3 	.word	0x08000fd3
 8000f58:	0800112b 	.word	0x0800112b
 8000f5c:	08001273 	.word	0x08001273
	case 1:
		fsm_automatic_run();
 8000f60:	f7ff f8f4 	bl	800014c <fsm_automatic_run>
		if (is_button_pressed_1s(0)) {
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fae1 	bl	800052c <is_button_pressed_1s>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d015      	beq.n	8000f9c <fsm_mode+0x64>
			if (timer1_flag==1) {
 8000f70:	4ba1      	ldr	r3, [pc, #644]	; (80011f8 <fsm_mode+0x2c0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	f040 8206 	bne.w	8001386 <fsm_mode+0x44e>
				tempt=red;
 8000f7a:	4ba0      	ldr	r3, [pc, #640]	; (80011fc <fsm_mode+0x2c4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4aa0      	ldr	r2, [pc, #640]	; (8001200 <fsm_mode+0x2c8>)
 8000f80:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_RED);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f000 fb4c 	bl	8001620 <setcolor1>
				setcolor2(AUTO_RED);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 fba5 	bl	80016d8 <setcolor2>
				mode=2;
 8000f8e:	4b99      	ldr	r3, [pc, #612]	; (80011f4 <fsm_mode+0x2bc>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fa0f 	bl	80013b8 <setTimer1>
			setcolor1(AUTO_RED);
			setcolor2(AUTO_RED);
			setTimer1(50);
			setTimer3(25);
		}
		break;
 8000f9a:	e1f4      	b.n	8001386 <fsm_mode+0x44e>
		} else if (check_button_flag(0)) {
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fa03 	bl	80003a8 <check_button_flag>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 81ee 	beq.w	8001386 <fsm_mode+0x44e>
			mode=2;
 8000faa:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <fsm_mode+0x2bc>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
			tempt=red;
 8000fb0:	4b92      	ldr	r3, [pc, #584]	; (80011fc <fsm_mode+0x2c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a92      	ldr	r2, [pc, #584]	; (8001200 <fsm_mode+0x2c8>)
 8000fb6:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_RED);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f000 fb31 	bl	8001620 <setcolor1>
			setcolor2(AUTO_RED);
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f000 fb8a 	bl	80016d8 <setcolor2>
			setTimer1(50);
 8000fc4:	2032      	movs	r0, #50	; 0x32
 8000fc6:	f000 f9f7 	bl	80013b8 <setTimer1>
			setTimer3(25);
 8000fca:	2019      	movs	r0, #25
 8000fcc:	f000 fa08 	bl	80013e0 <setTimer3>
		break;
 8000fd0:	e1d9      	b.n	8001386 <fsm_mode+0x44e>
	case 2:
		if (is_button_pressed_1s(0)) {
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff faaa 	bl	800052c <is_button_pressed_1s>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d014      	beq.n	8001008 <fsm_mode+0xd0>
			if (timer1_flag==1) {
 8000fde:	4b86      	ldr	r3, [pc, #536]	; (80011f8 <fsm_mode+0x2c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d130      	bne.n	8001048 <fsm_mode+0x110>
				mode=3;
 8000fe6:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <fsm_mode+0x2bc>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	601a      	str	r2, [r3, #0]
				tempt=yellow;
 8000fec:	4b85      	ldr	r3, [pc, #532]	; (8001204 <fsm_mode+0x2cc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a83      	ldr	r2, [pc, #524]	; (8001200 <fsm_mode+0x2c8>)
 8000ff2:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_YELLOW);
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f000 fb13 	bl	8001620 <setcolor1>
				setcolor2(AUTO_YELLOW);
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f000 fb6c 	bl	80016d8 <setcolor2>
				setTimer1(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f000 f9d9 	bl	80013b8 <setTimer1>
 8001006:	e01f      	b.n	8001048 <fsm_mode+0x110>
			}
		} else {
			if (timer1_flag==1) {
 8001008:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <fsm_mode+0x2c0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <fsm_mode+0xe4>
				blinkled(AUTO_RED);
 8001010:	2002      	movs	r0, #2
 8001012:	f000 fbbd 	bl	8001790 <blinkled>
				setTimer1(50);
 8001016:	2032      	movs	r0, #50	; 0x32
 8001018:	f000 f9ce 	bl	80013b8 <setTimer1>
			}
			if (check_button_flag(0)) {
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff f9c3 	bl	80003a8 <check_button_flag>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00f      	beq.n	8001048 <fsm_mode+0x110>
				mode=3;
 8001028:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <fsm_mode+0x2bc>)
 800102a:	2203      	movs	r2, #3
 800102c:	601a      	str	r2, [r3, #0]
				tempt=yellow;
 800102e:	4b75      	ldr	r3, [pc, #468]	; (8001204 <fsm_mode+0x2cc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a73      	ldr	r2, [pc, #460]	; (8001200 <fsm_mode+0x2c8>)
 8001034:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_YELLOW);
 8001036:	2004      	movs	r0, #4
 8001038:	f000 faf2 	bl	8001620 <setcolor1>
				setcolor2(AUTO_YELLOW);
 800103c:	2004      	movs	r0, #4
 800103e:	f000 fb4b 	bl	80016d8 <setcolor2>
				setTimer1(50);
 8001042:	2032      	movs	r0, #50	; 0x32
 8001044:	f000 f9b8 	bl	80013b8 <setTimer1>
			}
		}
		if (is_button_pressed_1s(1)) {
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fa6f 	bl	800052c <is_button_pressed_1s>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <fsm_mode+0x146>
			if (timer3_flag==1) {
 8001054:	4b6c      	ldr	r3, [pc, #432]	; (8001208 <fsm_mode+0x2d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d123      	bne.n	80010a4 <fsm_mode+0x16c>
				if (tempt>99) {
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <fsm_mode+0x2c8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b63      	cmp	r3, #99	; 0x63
 8001062:	dd03      	ble.n	800106c <fsm_mode+0x134>
					tempt=1;
 8001064:	4b66      	ldr	r3, [pc, #408]	; (8001200 <fsm_mode+0x2c8>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e004      	b.n	8001076 <fsm_mode+0x13e>
				} else tempt++;
 800106c:	4b64      	ldr	r3, [pc, #400]	; (8001200 <fsm_mode+0x2c8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a63      	ldr	r2, [pc, #396]	; (8001200 <fsm_mode+0x2c8>)
 8001074:	6013      	str	r3, [r2, #0]
				setTimer3(25);
 8001076:	2019      	movs	r0, #25
 8001078:	f000 f9b2 	bl	80013e0 <setTimer3>
 800107c:	e012      	b.n	80010a4 <fsm_mode+0x16c>
			}
		} else if (check_button_flag(1)) {
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff f992 	bl	80003a8 <check_button_flag>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <fsm_mode+0x16c>
			if (tempt>99) {
 800108a:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <fsm_mode+0x2c8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b63      	cmp	r3, #99	; 0x63
 8001090:	dd03      	ble.n	800109a <fsm_mode+0x162>
				tempt=1;
 8001092:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <fsm_mode+0x2c8>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e004      	b.n	80010a4 <fsm_mode+0x16c>
			} else tempt++;
 800109a:	4b59      	ldr	r3, [pc, #356]	; (8001200 <fsm_mode+0x2c8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a57      	ldr	r2, [pc, #348]	; (8001200 <fsm_mode+0x2c8>)
 80010a2:	6013      	str	r3, [r2, #0]
		}
		if (check_button_flag(2)) {
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff f97f 	bl	80003a8 <check_button_flag>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 816c 	beq.w	800138a <fsm_mode+0x452>
			red=tempt;
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <fsm_mode+0x2c8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a51      	ldr	r2, [pc, #324]	; (80011fc <fsm_mode+0x2c4>)
 80010b8:	6013      	str	r3, [r2, #0]
			if (red>(green+yellow)) {
 80010ba:	4b54      	ldr	r3, [pc, #336]	; (800120c <fsm_mode+0x2d4>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <fsm_mode+0x2cc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	441a      	add	r2, r3
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <fsm_mode+0x2c4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	da07      	bge.n	80010dc <fsm_mode+0x1a4>
				green=red-yellow;
 80010cc:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <fsm_mode+0x2c4>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <fsm_mode+0x2cc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a4d      	ldr	r2, [pc, #308]	; (800120c <fsm_mode+0x2d4>)
 80010d8:	6013      	str	r3, [r2, #0]
				if (red%2!=0) {
					green+=1;
				}
			}
		}
		break;
 80010da:	e156      	b.n	800138a <fsm_mode+0x452>
			} else if (red<(green+yellow)) {
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <fsm_mode+0x2d4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <fsm_mode+0x2cc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	441a      	add	r2, r3
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <fsm_mode+0x2c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	f340 814d 	ble.w	800138a <fsm_mode+0x452>
				green=red/2;
 80010f0:	4b42      	ldr	r3, [pc, #264]	; (80011fc <fsm_mode+0x2c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0fda      	lsrs	r2, r3, #31
 80010f6:	4413      	add	r3, r2
 80010f8:	105b      	asrs	r3, r3, #1
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <fsm_mode+0x2d4>)
 80010fe:	601a      	str	r2, [r3, #0]
				yellow=red/2;
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <fsm_mode+0x2c4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0fda      	lsrs	r2, r3, #31
 8001106:	4413      	add	r3, r2
 8001108:	105b      	asrs	r3, r3, #1
 800110a:	461a      	mov	r2, r3
 800110c:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <fsm_mode+0x2cc>)
 800110e:	601a      	str	r2, [r3, #0]
				if (red%2!=0) {
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <fsm_mode+0x2c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8136 	beq.w	800138a <fsm_mode+0x452>
					green+=1;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <fsm_mode+0x2d4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a39      	ldr	r2, [pc, #228]	; (800120c <fsm_mode+0x2d4>)
 8001126:	6013      	str	r3, [r2, #0]
		break;
 8001128:	e12f      	b.n	800138a <fsm_mode+0x452>
	case 3:
		if (is_button_pressed_1s(0)) {
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff f9fe 	bl	800052c <is_button_pressed_1s>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d014      	beq.n	8001160 <fsm_mode+0x228>
			if (timer1_flag==1) {
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <fsm_mode+0x2c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d130      	bne.n	80011a0 <fsm_mode+0x268>
				mode=4;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <fsm_mode+0x2bc>)
 8001140:	2204      	movs	r2, #4
 8001142:	601a      	str	r2, [r3, #0]
				tempt=green;
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <fsm_mode+0x2d4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <fsm_mode+0x2c8>)
 800114a:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_GREEN);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 fa67 	bl	8001620 <setcolor1>
				setcolor2(AUTO_GREEN);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 fac0 	bl	80016d8 <setcolor2>
				setTimer1(100);
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f000 f92d 	bl	80013b8 <setTimer1>
 800115e:	e01f      	b.n	80011a0 <fsm_mode+0x268>
			}
		} else {
			if (timer1_flag==1) {
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <fsm_mode+0x2c0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <fsm_mode+0x23c>
				blinkled(AUTO_YELLOW);
 8001168:	2004      	movs	r0, #4
 800116a:	f000 fb11 	bl	8001790 <blinkled>
				setTimer1(50);
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f000 f922 	bl	80013b8 <setTimer1>
			}
			if (check_button_flag(0)) {
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff f917 	bl	80003a8 <check_button_flag>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00f      	beq.n	80011a0 <fsm_mode+0x268>
				mode=4;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <fsm_mode+0x2bc>)
 8001182:	2204      	movs	r2, #4
 8001184:	601a      	str	r2, [r3, #0]
				tempt=green;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <fsm_mode+0x2d4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <fsm_mode+0x2c8>)
 800118c:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_GREEN);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 fa46 	bl	8001620 <setcolor1>
				setcolor2(AUTO_GREEN);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 fa9f 	bl	80016d8 <setcolor2>
				setTimer1(50);
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f000 f90c 	bl	80013b8 <setTimer1>
			}
		}
		if (is_button_pressed_1s(1)) {
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff f9c3 	bl	800052c <is_button_pressed_1s>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d014      	beq.n	80011d6 <fsm_mode+0x29e>
			if (timer3_flag==1) {
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <fsm_mode+0x2d0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d132      	bne.n	800121a <fsm_mode+0x2e2>
				if (tempt>99) {
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <fsm_mode+0x2c8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b63      	cmp	r3, #99	; 0x63
 80011ba:	dd03      	ble.n	80011c4 <fsm_mode+0x28c>
					tempt=1;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <fsm_mode+0x2c8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e004      	b.n	80011ce <fsm_mode+0x296>
				} else tempt++;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <fsm_mode+0x2c8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <fsm_mode+0x2c8>)
 80011cc:	6013      	str	r3, [r2, #0]
				setTimer3(25);
 80011ce:	2019      	movs	r0, #25
 80011d0:	f000 f906 	bl	80013e0 <setTimer3>
 80011d4:	e021      	b.n	800121a <fsm_mode+0x2e2>
			}
		} else if (check_button_flag(1)) {
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff f8e6 	bl	80003a8 <check_button_flag>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d01b      	beq.n	800121a <fsm_mode+0x2e2>
			if (tempt>99) {
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <fsm_mode+0x2c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	dd12      	ble.n	8001210 <fsm_mode+0x2d8>
				tempt=1;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <fsm_mode+0x2c8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e013      	b.n	800121a <fsm_mode+0x2e2>
 80011f2:	bf00      	nop
 80011f4:	20000018 	.word	0x20000018
 80011f8:	2000006c 	.word	0x2000006c
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	2000001c 	.word	0x2000001c
 8001204:	20000010 	.word	0x20000010
 8001208:	2000007c 	.word	0x2000007c
 800120c:	20000014 	.word	0x20000014
			} else tempt++;
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <fsm_mode+0x460>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a60      	ldr	r2, [pc, #384]	; (8001398 <fsm_mode+0x460>)
 8001218:	6013      	str	r3, [r2, #0]
		}
		if (check_button_flag(2)) {
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff f8c4 	bl	80003a8 <check_button_flag>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80b3 	beq.w	800138e <fsm_mode+0x456>
			yellow=tempt;
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <fsm_mode+0x460>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a5b      	ldr	r2, [pc, #364]	; (800139c <fsm_mode+0x464>)
 800122e:	6013      	str	r3, [r2, #0]
			if (red!= (green+yellow)) {
 8001230:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <fsm_mode+0x468>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <fsm_mode+0x464>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	441a      	add	r2, r3
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <fsm_mode+0x46c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	f000 80a5 	beq.w	800138e <fsm_mode+0x456>
				red=green+yellow;
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <fsm_mode+0x468>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b54      	ldr	r3, [pc, #336]	; (800139c <fsm_mode+0x464>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a55      	ldr	r2, [pc, #340]	; (80013a4 <fsm_mode+0x46c>)
 8001250:	6013      	str	r3, [r2, #0]
				if (red>99) {
 8001252:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <fsm_mode+0x46c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b63      	cmp	r3, #99	; 0x63
 8001258:	f340 8099 	ble.w	800138e <fsm_mode+0x456>
					red=99;
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <fsm_mode+0x46c>)
 800125e:	2263      	movs	r2, #99	; 0x63
 8001260:	601a      	str	r2, [r3, #0]
					green=red-yellow;
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <fsm_mode+0x46c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <fsm_mode+0x464>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <fsm_mode+0x468>)
 800126e:	6013      	str	r3, [r2, #0]
				}
			}
		}
		break;
 8001270:	e08d      	b.n	800138e <fsm_mode+0x456>
	case 4:
		if (is_button_pressed_1s(0)) {
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff f95a 	bl	800052c <is_button_pressed_1s>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <fsm_mode+0x370>
			if (timer1_flag==1) {
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <fsm_mode+0x470>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d126      	bne.n	80012d4 <fsm_mode+0x39c>
				mode=2;
 8001286:	4b49      	ldr	r3, [pc, #292]	; (80013ac <fsm_mode+0x474>)
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
				tempt=red;
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <fsm_mode+0x46c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a41      	ldr	r2, [pc, #260]	; (8001398 <fsm_mode+0x460>)
 8001292:	6013      	str	r3, [r2, #0]
				setcolor1(AUTO_RED);
 8001294:	2002      	movs	r0, #2
 8001296:	f000 f9c3 	bl	8001620 <setcolor1>
				setcolor2(AUTO_RED);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 fa1c 	bl	80016d8 <setcolor2>
				setTimer1(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f000 f889 	bl	80013b8 <setTimer1>
 80012a6:	e015      	b.n	80012d4 <fsm_mode+0x39c>
			}
		} else {
			if (timer1_flag==1) {
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <fsm_mode+0x470>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <fsm_mode+0x384>
				blinkled(AUTO_GREEN);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 fa6d 	bl	8001790 <blinkled>
				setTimer1(50);
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f000 f87e 	bl	80013b8 <setTimer1>
			}
			if (check_button_flag(0)) {
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff f873 	bl	80003a8 <check_button_flag>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <fsm_mode+0x39c>
				mode=1;
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <fsm_mode+0x474>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
				status=INIT;
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <fsm_mode+0x478>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
			}
		}
		if (is_button_pressed_1s(1)) {
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff f929 	bl	800052c <is_button_pressed_1s>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d014      	beq.n	800130a <fsm_mode+0x3d2>
			if (timer3_flag==1) {
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <fsm_mode+0x47c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d123      	bne.n	8001330 <fsm_mode+0x3f8>
				if (tempt>99) {
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <fsm_mode+0x460>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b63      	cmp	r3, #99	; 0x63
 80012ee:	dd03      	ble.n	80012f8 <fsm_mode+0x3c0>
					tempt=1;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <fsm_mode+0x460>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e004      	b.n	8001302 <fsm_mode+0x3ca>
				} else tempt++;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <fsm_mode+0x460>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <fsm_mode+0x460>)
 8001300:	6013      	str	r3, [r2, #0]
				setTimer3(25);
 8001302:	2019      	movs	r0, #25
 8001304:	f000 f86c 	bl	80013e0 <setTimer3>
 8001308:	e012      	b.n	8001330 <fsm_mode+0x3f8>
			}
		} else if (check_button_flag(1)) {
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff f84c 	bl	80003a8 <check_button_flag>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00c      	beq.n	8001330 <fsm_mode+0x3f8>
			if (tempt>99) {
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <fsm_mode+0x460>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b63      	cmp	r3, #99	; 0x63
 800131c:	dd03      	ble.n	8001326 <fsm_mode+0x3ee>
				tempt=1;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <fsm_mode+0x460>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e004      	b.n	8001330 <fsm_mode+0x3f8>
			} else tempt++;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <fsm_mode+0x460>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <fsm_mode+0x460>)
 800132e:	6013      	str	r3, [r2, #0]
		}
		if (check_button_flag(2)) {
 8001330:	2002      	movs	r0, #2
 8001332:	f7ff f839 	bl	80003a8 <check_button_flag>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d02a      	beq.n	8001392 <fsm_mode+0x45a>
			green=tempt;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <fsm_mode+0x460>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <fsm_mode+0x468>)
 8001342:	6013      	str	r3, [r2, #0]
			if (red!= (green+yellow)) {
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <fsm_mode+0x468>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <fsm_mode+0x464>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	441a      	add	r2, r3
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <fsm_mode+0x46c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d01d      	beq.n	8001392 <fsm_mode+0x45a>
				red=green+yellow;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <fsm_mode+0x468>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <fsm_mode+0x464>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <fsm_mode+0x46c>)
 8001362:	6013      	str	r3, [r2, #0]
				if (red>99) {
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <fsm_mode+0x46c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b63      	cmp	r3, #99	; 0x63
 800136a:	dd12      	ble.n	8001392 <fsm_mode+0x45a>
					red=99;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <fsm_mode+0x46c>)
 800136e:	2263      	movs	r2, #99	; 0x63
 8001370:	601a      	str	r2, [r3, #0]
					yellow=red-green;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <fsm_mode+0x46c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <fsm_mode+0x468>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <fsm_mode+0x464>)
 800137e:	6013      	str	r3, [r2, #0]
				}
			}
		}
		break;
 8001380:	e007      	b.n	8001392 <fsm_mode+0x45a>
	default:
		break;
 8001382:	bf00      	nop
 8001384:	e006      	b.n	8001394 <fsm_mode+0x45c>
		break;
 8001386:	bf00      	nop
 8001388:	e004      	b.n	8001394 <fsm_mode+0x45c>
		break;
 800138a:	bf00      	nop
 800138c:	e002      	b.n	8001394 <fsm_mode+0x45c>
		break;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <fsm_mode+0x45c>
		break;
 8001392:	bf00      	nop
	}
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000001c 	.word	0x2000001c
 800139c:	20000010 	.word	0x20000010
 80013a0:	20000014 	.word	0x20000014
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	2000006c 	.word	0x2000006c
 80013ac:	20000018 	.word	0x20000018
 80013b0:	20000000 	.word	0x20000000
 80013b4:	2000007c 	.word	0x2000007c

080013b8 <setTimer1>:
int timer4_flag=0;

int timer5_counter=0;
int timer5_flag=0;

void setTimer1(int duration) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80013c0:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <setTimer1+0x20>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <setTimer1+0x24>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000068 	.word	0x20000068
 80013dc:	2000006c 	.word	0x2000006c

080013e0 <setTimer3>:
void setTimer2(int duration) {
	timer2_counter=duration;
	timer2_flag=0;
}

void setTimer3(int duration) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <setTimer3+0x20>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <setTimer3+0x24>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000078 	.word	0x20000078
 8001404:	2000007c 	.word	0x2000007c

08001408 <setTimer4>:

void setTimer4(int duration) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <setTimer4+0x20>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <setTimer4+0x24>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000080 	.word	0x20000080
 800142c:	20000084 	.word	0x20000084

08001430 <timerRun>:
void setTimer5(int duration) {
	timer5_counter=duration;
	timer5_flag=0;
}

void timerRun() {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <timerRun+0xac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd0b      	ble.n	8001454 <timerRun+0x24>
		timer1_counter--;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <timerRun+0xac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <timerRun+0xac>)
 8001444:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <timerRun+0xac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc02      	bgt.n	8001454 <timerRun+0x24>
			timer1_flag=1;
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <timerRun+0xb0>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <timerRun+0xb4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd0b      	ble.n	8001474 <timerRun+0x44>
		timer2_counter--;
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <timerRun+0xb4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <timerRun+0xb4>)
 8001464:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <timerRun+0xb4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc02      	bgt.n	8001474 <timerRun+0x44>
			timer2_flag=1;
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <timerRun+0xb8>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <timerRun+0xbc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd0b      	ble.n	8001494 <timerRun+0x64>
		timer3_counter--;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <timerRun+0xbc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <timerRun+0xbc>)
 8001484:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <timerRun+0xbc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dc02      	bgt.n	8001494 <timerRun+0x64>
			timer3_flag=1;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <timerRun+0xc0>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <timerRun+0xc4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd0b      	ble.n	80014b4 <timerRun+0x84>
		timer4_counter--;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <timerRun+0xc4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <timerRun+0xc4>)
 80014a4:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <timerRun+0xc4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc02      	bgt.n	80014b4 <timerRun+0x84>
			timer4_flag=1;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <timerRun+0xc8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <timerRun+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dd0b      	ble.n	80014d4 <timerRun+0xa4>
		timer5_counter--;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <timerRun+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <timerRun+0xcc>)
 80014c4:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <timerRun+0xcc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dc02      	bgt.n	80014d4 <timerRun+0xa4>
			timer5_flag=1;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <timerRun+0xd0>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000068 	.word	0x20000068
 80014e0:	2000006c 	.word	0x2000006c
 80014e4:	20000070 	.word	0x20000070
 80014e8:	20000074 	.word	0x20000074
 80014ec:	20000078 	.word	0x20000078
 80014f0:	2000007c 	.word	0x2000007c
 80014f4:	20000080 	.word	0x20000080
 80014f8:	20000084 	.word	0x20000084
 80014fc:	20000088 	.word	0x20000088
 8001500:	2000008c 	.word	0x2000008c

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001578:	d113      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	201c      	movs	r0, #28
 8001598:	f000 fa8d 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800159c:	201c      	movs	r0, #28
 800159e:	f000 faa6 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f96b 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f001 f8c7 	bl	8002798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000009c 	.word	0x2000009c

08001614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <setcolor1>:
 *      Author: Vostro
 */

#include "traffic.h"

void setcolor1(int color){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	2b03      	cmp	r3, #3
 800162e:	d84b      	bhi.n	80016c8 <setcolor1+0xa8>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <setcolor1+0x18>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001649 	.word	0x08001649
 800163c:	08001669 	.word	0x08001669
 8001640:	080016a9 	.word	0x080016a9
 8001644:	08001689 	.word	0x08001689
	switch (color) {
	case INIT:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2102      	movs	r1, #2
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <setcolor1+0xb4>)
 800164e:	f000 fbfa 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2104      	movs	r1, #4
 8001656:	481f      	ldr	r0, [pc, #124]	; (80016d4 <setcolor1+0xb4>)
 8001658:	f000 fbf5 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2108      	movs	r1, #8
 8001660:	481c      	ldr	r0, [pc, #112]	; (80016d4 <setcolor1+0xb4>)
 8001662:	f000 fbf0 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 8001666:	e030      	b.n	80016ca <setcolor1+0xaa>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2102      	movs	r1, #2
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <setcolor1+0xb4>)
 800166e:	f000 fbea 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2104      	movs	r1, #4
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <setcolor1+0xb4>)
 8001678:	f000 fbe5 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	4814      	ldr	r0, [pc, #80]	; (80016d4 <setcolor1+0xb4>)
 8001682:	f000 fbe0 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 8001686:	e020      	b.n	80016ca <setcolor1+0xaa>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2102      	movs	r1, #2
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <setcolor1+0xb4>)
 800168e:	f000 fbda 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2104      	movs	r1, #4
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <setcolor1+0xb4>)
 8001698:	f000 fbd5 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2108      	movs	r1, #8
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <setcolor1+0xb4>)
 80016a2:	f000 fbd0 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 80016a6:	e010      	b.n	80016ca <setcolor1+0xaa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2102      	movs	r1, #2
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <setcolor1+0xb4>)
 80016ae:	f000 fbca 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2104      	movs	r1, #4
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <setcolor1+0xb4>)
 80016b8:	f000 fbc5 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2108      	movs	r1, #8
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <setcolor1+0xb4>)
 80016c2:	f000 fbc0 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 80016c6:	e000      	b.n	80016ca <setcolor1+0xaa>
	default:
		break;
 80016c8:	bf00      	nop
	}
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40010800 	.word	0x40010800

080016d8 <setcolor2>:

void setcolor2(int color) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d84b      	bhi.n	8001780 <setcolor2+0xa8>
 80016e8:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <setcolor2+0x18>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001701 	.word	0x08001701
 80016f4:	08001721 	.word	0x08001721
 80016f8:	08001761 	.word	0x08001761
 80016fc:	08001741 	.word	0x08001741
	switch (color) {
	case INIT:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2110      	movs	r1, #16
 8001704:	4821      	ldr	r0, [pc, #132]	; (800178c <setcolor2+0xb4>)
 8001706:	f000 fb9e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2120      	movs	r1, #32
 800170e:	481f      	ldr	r0, [pc, #124]	; (800178c <setcolor2+0xb4>)
 8001710:	f000 fb99 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	481c      	ldr	r0, [pc, #112]	; (800178c <setcolor2+0xb4>)
 800171a:	f000 fb94 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 800171e:	e030      	b.n	8001782 <setcolor2+0xaa>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2110      	movs	r1, #16
 8001724:	4819      	ldr	r0, [pc, #100]	; (800178c <setcolor2+0xb4>)
 8001726:	f000 fb8e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2120      	movs	r1, #32
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <setcolor2+0xb4>)
 8001730:	f000 fb89 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <setcolor2+0xb4>)
 800173a:	f000 fb84 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 800173e:	e020      	b.n	8001782 <setcolor2+0xaa>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2110      	movs	r1, #16
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <setcolor2+0xb4>)
 8001746:	f000 fb7e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <setcolor2+0xb4>)
 8001750:	f000 fb79 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <setcolor2+0xb4>)
 800175a:	f000 fb74 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 800175e:	e010      	b.n	8001782 <setcolor2+0xaa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <setcolor2+0xb4>)
 8001766:	f000 fb6e 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <setcolor2+0xb4>)
 8001770:	f000 fb69 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <setcolor2+0xb4>)
 800177a:	f000 fb64 	bl	8001e46 <HAL_GPIO_WritePin>
		break;
 800177e:	e000      	b.n	8001782 <setcolor2+0xaa>
	default:
		break;
 8001780:	bf00      	nop
	}
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40010800 	.word	0x40010800

08001790 <blinkled>:

void blinkled(int color) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d01b      	beq.n	80017d6 <blinkled+0x46>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	dc21      	bgt.n	80017e8 <blinkled+0x58>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <blinkled+0x22>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d009      	beq.n	80017c4 <blinkled+0x34>
	case AUTO_YELLOW:
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port,YELLOW1_Pin);
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port,YELLOW2_Pin);
		break;
	default:
		break;
 80017b0:	e01a      	b.n	80017e8 <blinkled+0x58>
		HAL_GPIO_TogglePin(RED1_GPIO_Port,RED1_Pin);
 80017b2:	2102      	movs	r1, #2
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <blinkled+0x64>)
 80017b6:	f000 fb5e 	bl	8001e76 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port,RED2_Pin);
 80017ba:	2110      	movs	r1, #16
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <blinkled+0x64>)
 80017be:	f000 fb5a 	bl	8001e76 <HAL_GPIO_TogglePin>
		break;
 80017c2:	e012      	b.n	80017ea <blinkled+0x5a>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port,GREEN1_Pin);
 80017c4:	2108      	movs	r1, #8
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <blinkled+0x64>)
 80017c8:	f000 fb55 	bl	8001e76 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port,GREEN2_Pin);
 80017cc:	2140      	movs	r1, #64	; 0x40
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <blinkled+0x64>)
 80017d0:	f000 fb51 	bl	8001e76 <HAL_GPIO_TogglePin>
		break;
 80017d4:	e009      	b.n	80017ea <blinkled+0x5a>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port,YELLOW1_Pin);
 80017d6:	2104      	movs	r1, #4
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <blinkled+0x64>)
 80017da:	f000 fb4c 	bl	8001e76 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port,YELLOW2_Pin);
 80017de:	2120      	movs	r1, #32
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <blinkled+0x64>)
 80017e2:	f000 fb48 	bl	8001e76 <HAL_GPIO_TogglePin>
		break;
 80017e6:	e000      	b.n	80017ea <blinkled+0x5a>
		break;
 80017e8:	bf00      	nop
	}
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40010800 	.word	0x40010800

080017f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff ff0c 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001814:	4c09      	ldr	r4, [pc, #36]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f001 fb05 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fa6d 	bl	8000d04 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001834:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 8001838:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800183c:	200000e8 	.word	0x200000e8

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x28>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f923 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fe50 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f903 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000024 	.word	0x20000024
 80018c8:	2000002c 	.word	0x2000002c
 80018cc:	20000028 	.word	0x20000028

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_IncTick+0x20>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	2000002c 	.word	0x2000002c
 80018f0:	200000e4 	.word	0x200000e4

080018f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	200000e4 	.word	0x200000e4

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e148      	b.n	8001dca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8137 	bne.w	8001dc4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4aa3      	ldr	r2, [pc, #652]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4aa1      	ldr	r2, [pc, #644]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4aa1      	ldr	r2, [pc, #644]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a9f      	ldr	r2, [pc, #636]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a9f      	ldr	r2, [pc, #636]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a9d      	ldr	r2, [pc, #628]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a9d      	ldr	r2, [pc, #628]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a9b      	ldr	r2, [pc, #620]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a9b      	ldr	r2, [pc, #620]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a99      	ldr	r2, [pc, #612]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a82      	ldr	r2, [pc, #520]	; (8001dfc <HAL_GPIO_Init+0x2d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8090 	beq.w	8001dc4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a49      	ldr	r2, [pc, #292]	; (8001e08 <HAL_GPIO_Init+0x2e4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <HAL_GPIO_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_GPIO_Init+0x1d8>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d04:	2300      	movs	r3, #0
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d16:	493b      	ldr	r1, [pc, #236]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4937      	ldr	r1, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4933      	ldr	r1, [pc, #204]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	492d      	ldr	r1, [pc, #180]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4929      	ldr	r1, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4923      	ldr	r1, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	491f      	ldr	r1, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4919      	ldr	r1, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4915      	ldr	r1, [pc, #84]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f aeaf 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	372c      	adds	r7, #44	; 0x2c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	10320000 	.word	0x10320000
 8001dec:	10310000 	.word	0x10310000
 8001df0:	10220000 	.word	0x10220000
 8001df4:	10210000 	.word	0x10210000
 8001df8:	10120000 	.word	0x10120000
 8001dfc:	10110000 	.word	0x10110000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e56:	787b      	ldrb	r3, [r7, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	611a      	str	r2, [r3, #16]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e26c      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00c      	beq.n	8001eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d112      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
 8001ee0:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d06c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d168      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e246      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x76>
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a7f      	ldr	r2, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e02e      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7a      	ldr	r2, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b78      	ldr	r3, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a77      	ldr	r2, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xbc>
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a71      	ldr	r2, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f64:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fcb6 	bl	80018f4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fcb2 	bl	80018f4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1fa      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe4>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fca2 	bl	80018f4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fc9e 	bl	80018f4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1e6      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x10c>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1ba      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4939      	ldr	r1, [pc, #228]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fc57 	bl	80018f4 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff fc53 	bl	80018f4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e19b      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fc36 	bl	80018f4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7ff fc32 	bl	80018f4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e17a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03a      	beq.n	800212c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc16 	bl	80018f4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc12 	bl	80018f4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e15a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f000 fa9a 	bl	8002624 <RCC_Delay>
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fbfc 	bl	80018f4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fbf8 	bl	80018f4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d908      	bls.n	8002120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e140      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	42420000 	.word	0x42420000
 800211c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b9e      	ldr	r3, [pc, #632]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e9      	bne.n	8002100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a6 	beq.w	8002286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b97      	ldr	r3, [pc, #604]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10d      	bne.n	8002166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b94      	ldr	r3, [pc, #592]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a93      	ldr	r2, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b91      	ldr	r3, [pc, #580]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff fbb9 	bl	80018f4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff fbb5 	bl	80018f4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0fd      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021ac:	4b7b      	ldr	r3, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a7a      	ldr	r2, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e02d      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4b73      	ldr	r3, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a72      	ldr	r2, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	e01c      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0x356>
 80021e4:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a6c      	ldr	r2, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fb69 	bl	80018f4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff fb65 	bl	80018f4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0ab      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ee      	beq.n	8002226 <HAL_RCC_OscConfig+0x37e>
 8002248:	e014      	b.n	8002274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fb53 	bl	80018f4 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff fb4f 	bl	80018f4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e095      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b48      	ldr	r3, [pc, #288]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d061      	beq.n	8002360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d146      	bne.n	8002332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff fb23 	bl	80018f4 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff fb1f 	bl	80018f4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e067      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	492d      	ldr	r1, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a19      	ldr	r1, [r3, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	430b      	orrs	r3, r1
 80022fe:	4927      	ldr	r1, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff faf3 	bl	80018f4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff faef 	bl	80018f4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e037      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
 8002330:	e02f      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fadc 	bl	80018f4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff fad8 	bl	80018f4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e020      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x498>
 800235e:	e018      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e013      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4965      	ldr	r1, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7ff fa2c 	bl	80018f4 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff fa28 	bl	80018f4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d210      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1cc>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f98a 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	08002ea0 	.word	0x08002ea0
 8002574:	20000024 	.word	0x20000024
 8002578:	20000028 	.word	0x20000028

0800257c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x30>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x36>
 80025aa:	e027      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	e027      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	fb02 f203 	mul.w	r2, r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e004      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	613b      	str	r3, [r7, #16]
      break;
 80025fa:	e002      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002602:	693b      	ldr	r3, [r7, #16]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	08002eb0 	.word	0x08002eb0
 800261c:	08002ec0 	.word	0x08002ec0
 8002620:	003d0900 	.word	0x003d0900

08002624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCC_Delay+0x34>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <RCC_Delay+0x38>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a5b      	lsrs	r3, r3, #9
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002640:	bf00      	nop
  }
  while (Delay --);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f9      	bne.n	8002640 <RCC_Delay+0x1c>
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000024 	.word	0x20000024
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e041      	b.n	80026f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe ff6e 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f000 fa6e 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d001      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e035      	b.n	8002784 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_TIM_Base_Start_IT+0x90>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x4e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002742:	d004      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x4e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <HAL_TIM_Base_Start_IT+0x94>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d010      	beq.n	8002782 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	e007      	b.n	8002782 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400

08002798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0202 	mvn.w	r2, #2
 80027c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9b4 	bl	8002b48 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9a7 	bl	8002b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f9b6 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0204 	mvn.w	r2, #4
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f98a 	bl	8002b48 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f97d 	bl	8002b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f98c 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b08      	cmp	r3, #8
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0208 	mvn.w	r2, #8
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f960 	bl	8002b48 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f953 	bl	8002b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f962 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d122      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d11b      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0210 	mvn.w	r2, #16
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2208      	movs	r2, #8
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f936 	bl	8002b48 <HAL_TIM_IC_CaptureCallback>
 80028dc:	e005      	b.n	80028ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f929 	bl	8002b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f938 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0201 	mvn.w	r2, #1
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fafc 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d107      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fa6b 	bl	8002e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8fc 	bl	8002b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0220 	mvn.w	r2, #32
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa36 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_ConfigClockSource+0x1c>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0b4      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x186>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fc:	d03e      	beq.n	8002a7c <HAL_TIM_ConfigClockSource+0xd4>
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a02:	f200 8087 	bhi.w	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	f000 8086 	beq.w	8002b1a <HAL_TIM_ConfigClockSource+0x172>
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	d87f      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b70      	cmp	r3, #112	; 0x70
 8002a16:	d01a      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xa6>
 8002a18:	2b70      	cmp	r3, #112	; 0x70
 8002a1a:	d87b      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b60      	cmp	r3, #96	; 0x60
 8002a1e:	d050      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a20:	2b60      	cmp	r3, #96	; 0x60
 8002a22:	d877      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b50      	cmp	r3, #80	; 0x50
 8002a26:	d03c      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a28:	2b50      	cmp	r3, #80	; 0x50
 8002a2a:	d873      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d058      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d86f      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b30      	cmp	r3, #48	; 0x30
 8002a36:	d064      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	2b30      	cmp	r3, #48	; 0x30
 8002a3a:	d86b      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d060      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d867      	bhi.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05c      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x15a>
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d05a      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x15a>
 8002a4c:	e062      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f000 f95e 	bl	8002d1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	609a      	str	r2, [r3, #8]
      break;
 8002a7a:	e04f      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f000 f947 	bl	8002d1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e03c      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f000 f8be 	bl	8002c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2150      	movs	r1, #80	; 0x50
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f915 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002ac0:	e02c      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f000 f8dc 	bl	8002c8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2160      	movs	r1, #96	; 0x60
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f905 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e01c      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f000 f89e 	bl	8002c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2140      	movs	r1, #64	; 0x40
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f8f5 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002b00:	e00c      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f000 f8ec 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002b12:	e003      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      break;
 8002b18:	e000      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a25      	ldr	r2, [pc, #148]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x28>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x28>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_Base_SetConfig+0xac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0x52>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x52>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <TIM_Base_SetConfig+0xac>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400

08002c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 030a 	bic.w	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0210 	bic.w	r2, r3, #16
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f043 0307 	orr.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	021a      	lsls	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e041      	b.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10c      	bne.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	2600      	movs	r6, #0
 8002e34:	4d0c      	ldr	r5, [pc, #48]	; (8002e68 <__libc_init_array+0x38>)
 8002e36:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e38:	1b64      	subs	r4, r4, r5
 8002e3a:	10a4      	asrs	r4, r4, #2
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	f000 f822 	bl	8002e88 <_init>
 8002e44:	2600      	movs	r6, #0
 8002e46:	4d0a      	ldr	r5, [pc, #40]	; (8002e70 <__libc_init_array+0x40>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x44>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002ec4 	.word	0x08002ec4
 8002e6c:	08002ec4 	.word	0x08002ec4
 8002e70:	08002ec4 	.word	0x08002ec4
 8002e74:	08002ec8 	.word	0x08002ec8

08002e78 <memset>:
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4402      	add	r2, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
