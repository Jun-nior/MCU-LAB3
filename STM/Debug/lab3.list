
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d48  08002d48  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d48  08002d48  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000002c  08002d7c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002d7c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000966f  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b46  00000000  00000000  000296c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c60  00000000  00000000  0002c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf76  00000000  00000000  00043210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822e3  00000000  00000000  00050186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d24bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d0c 	.word	0x08002d0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002d0c 	.word	0x08002d0c

0800014c <fsm_automatic_run>:

#include "fsm_automatic.h"
#include "traffic.h"
#include "input_reading.h"

void fsm_automatic_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status) {
 8000150:	4b8f      	ldr	r3, [pc, #572]	; (8000390 <fsm_automatic_run+0x244>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b07      	cmp	r3, #7
 8000158:	f200 810f 	bhi.w	800037a <fsm_automatic_run+0x22e>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000185 	.word	0x08000185
 8000168:	0800037b 	.word	0x0800037b
 800016c:	0800037b 	.word	0x0800037b
 8000170:	0800037b 	.word	0x0800037b
 8000174:	080001bf 	.word	0x080001bf
 8000178:	08000253 	.word	0x08000253
 800017c:	080002b7 	.word	0x080002b7
 8000180:	08000317 	.word	0x08000317
	case INIT:
		setTimer1(green*100);
 8000184:	4b83      	ldr	r3, [pc, #524]	; (8000394 <fsm_automatic_run+0x248>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2264      	movs	r2, #100	; 0x64
 800018a:	fb02 f303 	mul.w	r3, r2, r3
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fc6e 	bl	8000a70 <setTimer1>
		setTimer2(100);
 8000194:	2064      	movs	r0, #100	; 0x64
 8000196:	f000 fc7f 	bl	8000a98 <setTimer2>
		setcolor1(AUTO_RED);
 800019a:	2002      	movs	r0, #2
 800019c:	f001 f918 	bl	80013d0 <setcolor1>
		setcolor2(AUTO_GREEN);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f001 f971 	bl	8001488 <setcolor2>
		counter1=red;
 80001a6:	4b7c      	ldr	r3, [pc, #496]	; (8000398 <fsm_automatic_run+0x24c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a7c      	ldr	r2, [pc, #496]	; (800039c <fsm_automatic_run+0x250>)
 80001ac:	6013      	str	r3, [r2, #0]
		counter2=green;
 80001ae:	4b79      	ldr	r3, [pc, #484]	; (8000394 <fsm_automatic_run+0x248>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a7b      	ldr	r2, [pc, #492]	; (80003a0 <fsm_automatic_run+0x254>)
 80001b4:	6013      	str	r3, [r2, #0]
		status=RED_GREEN;
 80001b6:	4b76      	ldr	r3, [pc, #472]	; (8000390 <fsm_automatic_run+0x244>)
 80001b8:	2205      	movs	r2, #5
 80001ba:	601a      	str	r2, [r3, #0]
		break;
 80001bc:	e0e6      	b.n	800038c <fsm_automatic_run+0x240>
	case RED_GREEN:
		if (check_button_flag(0)) {
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 f932 	bl	8000428 <check_button_flag>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d012      	beq.n	80001f0 <fsm_automatic_run+0xa4>
			status=2;
 80001ca:	4b71      	ldr	r3, [pc, #452]	; (8000390 <fsm_automatic_run+0x244>)
 80001cc:	2202      	movs	r2, #2
 80001ce:	601a      	str	r2, [r3, #0]
			tempt=red;
 80001d0:	4b71      	ldr	r3, [pc, #452]	; (8000398 <fsm_automatic_run+0x24c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a73      	ldr	r2, [pc, #460]	; (80003a4 <fsm_automatic_run+0x258>)
 80001d6:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_RED);
 80001d8:	2002      	movs	r0, #2
 80001da:	f001 f8f9 	bl	80013d0 <setcolor1>
			setcolor2(AUTO_RED);
 80001de:	2002      	movs	r0, #2
 80001e0:	f001 f952 	bl	8001488 <setcolor2>
			setTimer1(50);
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f000 fc43 	bl	8000a70 <setTimer1>
			setTimer3(25);
 80001ea:	2019      	movs	r0, #25
 80001ec:	f000 fc68 	bl	8000ac0 <setTimer3>
		}
		if (timer1_flag==1) {
 80001f0:	4b6d      	ldr	r3, [pc, #436]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d119      	bne.n	800022c <fsm_automatic_run+0xe0>
			status=RED_YELLOW;
 80001f8:	4b65      	ldr	r3, [pc, #404]	; (8000390 <fsm_automatic_run+0x244>)
 80001fa:	2206      	movs	r2, #6
 80001fc:	601a      	str	r2, [r3, #0]
			setcolor2(AUTO_YELLOW);
 80001fe:	2004      	movs	r0, #4
 8000200:	f001 f942 	bl	8001488 <setcolor2>
			counter2=yellow;
 8000204:	4b69      	ldr	r3, [pc, #420]	; (80003ac <fsm_automatic_run+0x260>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a65      	ldr	r2, [pc, #404]	; (80003a0 <fsm_automatic_run+0x254>)
 800020a:	6013      	str	r3, [r2, #0]
			setTimer1(yellow*100);
 800020c:	4b67      	ldr	r3, [pc, #412]	; (80003ac <fsm_automatic_run+0x260>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2264      	movs	r2, #100	; 0x64
 8000212:	fb02 f303 	mul.w	r3, r2, r3
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fc2a 	bl	8000a70 <setTimer1>
			setTimer2(100);
 800021c:	2064      	movs	r0, #100	; 0x64
 800021e:	f000 fc3b 	bl	8000a98 <setTimer2>
			counter1--;
 8000222:	4b5e      	ldr	r3, [pc, #376]	; (800039c <fsm_automatic_run+0x250>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	3b01      	subs	r3, #1
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <fsm_automatic_run+0x250>)
 800022a:	6013      	str	r3, [r2, #0]
		}
		if (timer2_flag==1) {
 800022c:	4b60      	ldr	r3, [pc, #384]	; (80003b0 <fsm_automatic_run+0x264>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	f040 80a4 	bne.w	800037e <fsm_automatic_run+0x232>
			counter1--;
 8000236:	4b59      	ldr	r3, [pc, #356]	; (800039c <fsm_automatic_run+0x250>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	4a57      	ldr	r2, [pc, #348]	; (800039c <fsm_automatic_run+0x250>)
 800023e:	6013      	str	r3, [r2, #0]
			counter2--;
 8000240:	4b57      	ldr	r3, [pc, #348]	; (80003a0 <fsm_automatic_run+0x254>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3b01      	subs	r3, #1
 8000246:	4a56      	ldr	r2, [pc, #344]	; (80003a0 <fsm_automatic_run+0x254>)
 8000248:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 800024a:	2064      	movs	r0, #100	; 0x64
 800024c:	f000 fc24 	bl	8000a98 <setTimer2>
		}
		break;
 8000250:	e095      	b.n	800037e <fsm_automatic_run+0x232>
	case RED_YELLOW:
		if (timer1_flag==1) {
 8000252:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <fsm_automatic_run+0x25c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d11b      	bne.n	8000292 <fsm_automatic_run+0x146>
			status=GREEN_RED;
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <fsm_automatic_run+0x244>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
			counter1=green;
 8000260:	4b4c      	ldr	r3, [pc, #304]	; (8000394 <fsm_automatic_run+0x248>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a4d      	ldr	r2, [pc, #308]	; (800039c <fsm_automatic_run+0x250>)
 8000266:	6013      	str	r3, [r2, #0]
			counter2=red;
 8000268:	4b4b      	ldr	r3, [pc, #300]	; (8000398 <fsm_automatic_run+0x24c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a4c      	ldr	r2, [pc, #304]	; (80003a0 <fsm_automatic_run+0x254>)
 800026e:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_GREEN);
 8000270:	2003      	movs	r0, #3
 8000272:	f001 f8ad 	bl	80013d0 <setcolor1>
			setcolor2(AUTO_RED);
 8000276:	2002      	movs	r0, #2
 8000278:	f001 f906 	bl	8001488 <setcolor2>
			setTimer1(green*100);
 800027c:	4b45      	ldr	r3, [pc, #276]	; (8000394 <fsm_automatic_run+0x248>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2264      	movs	r2, #100	; 0x64
 8000282:	fb02 f303 	mul.w	r3, r2, r3
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fbf2 	bl	8000a70 <setTimer1>
			setTimer2(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f000 fc03 	bl	8000a98 <setTimer2>
		}
		if (timer2_flag==1) {
 8000292:	4b47      	ldr	r3, [pc, #284]	; (80003b0 <fsm_automatic_run+0x264>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d173      	bne.n	8000382 <fsm_automatic_run+0x236>
			counter1--;
 800029a:	4b40      	ldr	r3, [pc, #256]	; (800039c <fsm_automatic_run+0x250>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3b01      	subs	r3, #1
 80002a0:	4a3e      	ldr	r2, [pc, #248]	; (800039c <fsm_automatic_run+0x250>)
 80002a2:	6013      	str	r3, [r2, #0]
			counter2--;
 80002a4:	4b3e      	ldr	r3, [pc, #248]	; (80003a0 <fsm_automatic_run+0x254>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	4a3d      	ldr	r2, [pc, #244]	; (80003a0 <fsm_automatic_run+0x254>)
 80002ac:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 80002ae:	2064      	movs	r0, #100	; 0x64
 80002b0:	f000 fbf2 	bl	8000a98 <setTimer2>
		}
		break;
 80002b4:	e065      	b.n	8000382 <fsm_automatic_run+0x236>
	case GREEN_RED:
		if (timer1_flag==1) {
 80002b6:	4b3c      	ldr	r3, [pc, #240]	; (80003a8 <fsm_automatic_run+0x25c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d119      	bne.n	80002f2 <fsm_automatic_run+0x1a6>
			status=YELLOW_RED;
 80002be:	4b34      	ldr	r3, [pc, #208]	; (8000390 <fsm_automatic_run+0x244>)
 80002c0:	2208      	movs	r2, #8
 80002c2:	601a      	str	r2, [r3, #0]
			setcolor1(AUTO_YELLOW);
 80002c4:	2004      	movs	r0, #4
 80002c6:	f001 f883 	bl	80013d0 <setcolor1>
			setTimer1(yellow*100);
 80002ca:	4b38      	ldr	r3, [pc, #224]	; (80003ac <fsm_automatic_run+0x260>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2264      	movs	r2, #100	; 0x64
 80002d0:	fb02 f303 	mul.w	r3, r2, r3
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fbcb 	bl	8000a70 <setTimer1>
			setTimer2(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 fbdc 	bl	8000a98 <setTimer2>
			counter1=yellow;
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <fsm_automatic_run+0x260>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2d      	ldr	r2, [pc, #180]	; (800039c <fsm_automatic_run+0x250>)
 80002e6:	6013      	str	r3, [r2, #0]
			counter2--;
 80002e8:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <fsm_automatic_run+0x254>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a2c      	ldr	r2, [pc, #176]	; (80003a0 <fsm_automatic_run+0x254>)
 80002f0:	6013      	str	r3, [r2, #0]
		}
		if (timer2_flag==1) {
 80002f2:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <fsm_automatic_run+0x264>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d145      	bne.n	8000386 <fsm_automatic_run+0x23a>
			counter1--;
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <fsm_automatic_run+0x250>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <fsm_automatic_run+0x250>)
 8000302:	6013      	str	r3, [r2, #0]
			counter2--;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <fsm_automatic_run+0x254>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a25      	ldr	r2, [pc, #148]	; (80003a0 <fsm_automatic_run+0x254>)
 800030c:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 fbc2 	bl	8000a98 <setTimer2>
		}
		break;
 8000314:	e037      	b.n	8000386 <fsm_automatic_run+0x23a>
	case YELLOW_RED:
		if (timer1_flag==1) {
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <fsm_automatic_run+0x25c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d11b      	bne.n	8000356 <fsm_automatic_run+0x20a>
			status=RED_GREEN;
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <fsm_automatic_run+0x244>)
 8000320:	2205      	movs	r2, #5
 8000322:	601a      	str	r2, [r3, #0]
			counter1=red;
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <fsm_automatic_run+0x24c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <fsm_automatic_run+0x250>)
 800032a:	6013      	str	r3, [r2, #0]
			counter2=green;
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <fsm_automatic_run+0x248>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <fsm_automatic_run+0x254>)
 8000332:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_RED);
 8000334:	2002      	movs	r0, #2
 8000336:	f001 f84b 	bl	80013d0 <setcolor1>
			setcolor2(AUTO_GREEN);
 800033a:	2003      	movs	r0, #3
 800033c:	f001 f8a4 	bl	8001488 <setcolor2>
			setTimer1(yellow*100);
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <fsm_automatic_run+0x260>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2264      	movs	r2, #100	; 0x64
 8000346:	fb02 f303 	mul.w	r3, r2, r3
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fb90 	bl	8000a70 <setTimer1>
			setTimer2(100);
 8000350:	2064      	movs	r0, #100	; 0x64
 8000352:	f000 fba1 	bl	8000a98 <setTimer2>
		}
		if (timer2_flag==1) {
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <fsm_automatic_run+0x264>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d115      	bne.n	800038a <fsm_automatic_run+0x23e>
			counter1--;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <fsm_automatic_run+0x250>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3b01      	subs	r3, #1
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <fsm_automatic_run+0x250>)
 8000366:	6013      	str	r3, [r2, #0]
			counter2--;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <fsm_automatic_run+0x254>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <fsm_automatic_run+0x254>)
 8000370:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000372:	2064      	movs	r0, #100	; 0x64
 8000374:	f000 fb90 	bl	8000a98 <setTimer2>
		}
		break;
 8000378:	e007      	b.n	800038a <fsm_automatic_run+0x23e>
	default:
		break;
 800037a:	bf00      	nop
 800037c:	e006      	b.n	800038c <fsm_automatic_run+0x240>
		break;
 800037e:	bf00      	nop
 8000380:	e004      	b.n	800038c <fsm_automatic_run+0x240>
		break;
 8000382:	bf00      	nop
 8000384:	e002      	b.n	800038c <fsm_automatic_run+0x240>
		break;
 8000386:	bf00      	nop
 8000388:	e000      	b.n	800038c <fsm_automatic_run+0x240>
		break;
 800038a:	bf00      	nop
	}
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000000 	.word	0x20000000
 8000394:	20000014 	.word	0x20000014
 8000398:	2000000c 	.word	0x2000000c
 800039c:	20000004 	.word	0x20000004
 80003a0:	20000008 	.word	0x20000008
 80003a4:	20000018 	.word	0x20000018
 80003a8:	20000068 	.word	0x20000068
 80003ac:	20000010 	.word	0x20000010
 80003b0:	20000070 	.word	0x20000070

080003b4 <fsm_7SEG>:

void fsm_7SEG() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	switch(status) {
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <fsm_7SEG+0x60>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b04      	cmp	r3, #4
 80003be:	dc02      	bgt.n	80003c6 <fsm_7SEG+0x12>
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	da13      	bge.n	80003ec <fsm_7SEG+0x38>
		if (timer4_flag==1) {
			scan7SEG(tempt, status);
			setTimer4(50);
		}
	default:
		break;
 80003c4:	e021      	b.n	800040a <fsm_7SEG+0x56>
 80003c6:	3b05      	subs	r3, #5
	switch(status) {
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d81e      	bhi.n	800040a <fsm_7SEG+0x56>
		if (timer4_flag==1) {
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <fsm_7SEG+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d11c      	bne.n	800040e <fsm_7SEG+0x5a>
			scan7SEG(counter1, counter2);
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <fsm_7SEG+0x68>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a11      	ldr	r2, [pc, #68]	; (8000420 <fsm_7SEG+0x6c>)
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 f8e2 	bl	80015a8 <scan7SEG>
			setTimer4(50);
 80003e4:	2032      	movs	r0, #50	; 0x32
 80003e6:	f000 fb7f 	bl	8000ae8 <setTimer4>
		break;
 80003ea:	e010      	b.n	800040e <fsm_7SEG+0x5a>
		if (timer4_flag==1) {
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <fsm_7SEG+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d10a      	bne.n	800040a <fsm_7SEG+0x56>
			scan7SEG(tempt, status);
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <fsm_7SEG+0x70>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a06      	ldr	r2, [pc, #24]	; (8000414 <fsm_7SEG+0x60>)
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f8d2 	bl	80015a8 <scan7SEG>
			setTimer4(50);
 8000404:	2032      	movs	r0, #50	; 0x32
 8000406:	f000 fb6f 	bl	8000ae8 <setTimer4>
		break;
 800040a:	bf00      	nop
 800040c:	e000      	b.n	8000410 <fsm_7SEG+0x5c>
		break;
 800040e:	bf00      	nop
	}
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000000 	.word	0x20000000
 8000418:	20000080 	.word	0x20000080
 800041c:	20000004 	.word	0x20000004
 8000420:	20000008 	.word	0x20000008
 8000424:	20000018 	.word	0x20000018

08000428 <check_button_flag>:
static	GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static	uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static	uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
int button_flag[NO_OF_BUTTONS];

int check_button_flag(int i) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1) {
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <check_button_flag+0x30>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d106      	bne.n	800044a <check_button_flag+0x22>
		button_flag[i] = 0;
 800043c:	4a06      	ldr	r2, [pc, #24]	; (8000458 <check_button_flag+0x30>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2100      	movs	r1, #0
 8000442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <check_button_flag+0x24>
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	2000008c 	.word	0x2000008c

0800045c <button_reading>:

void button_reading(void) {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 8000462:	2300      	movs	r3, #0
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	e087      	b.n	8000578 <button_reading+0x11c>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4947      	ldr	r1, [pc, #284]	; (800058c <button_reading+0x130>)
 800046e:	5c89      	ldrb	r1, [r1, r2]
 8000470:	4a47      	ldr	r2, [pc, #284]	; (8000590 <button_reading+0x134>)
 8000472:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000474:	79fa      	ldrb	r2, [r7, #7]
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	4946      	ldr	r1, [pc, #280]	; (8000594 <button_reading+0x138>)
 800047a:	5c89      	ldrb	r1, [r1, r2]
 800047c:	4a43      	ldr	r2, [pc, #268]	; (800058c <button_reading+0x130>)
 800047e:	54d1      	strb	r1, [r2, r3]
		switch (i) {
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d01c      	beq.n	80004c0 <button_reading+0x64>
 8000486:	2b02      	cmp	r3, #2
 8000488:	dc25      	bgt.n	80004d6 <button_reading+0x7a>
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <button_reading+0x38>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d00b      	beq.n	80004aa <button_reading+0x4e>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
				break;
			default:
				break;
 8000492:	e020      	b.n	80004d6 <button_reading+0x7a>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000494:	79fc      	ldrb	r4, [r7, #7]
 8000496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049a:	483f      	ldr	r0, [pc, #252]	; (8000598 <button_reading+0x13c>)
 800049c:	f001 fbfe 	bl	8001c9c <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b3b      	ldr	r3, [pc, #236]	; (8000594 <button_reading+0x138>)
 80004a6:	551a      	strb	r2, [r3, r4]
				break;
 80004a8:	e016      	b.n	80004d8 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80004aa:	79fc      	ldrb	r4, [r7, #7]
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4839      	ldr	r0, [pc, #228]	; (8000598 <button_reading+0x13c>)
 80004b2:	f001 fbf3 	bl	8001c9c <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b36      	ldr	r3, [pc, #216]	; (8000594 <button_reading+0x138>)
 80004bc:	551a      	strb	r2, [r3, r4]
				break;
 80004be:	e00b      	b.n	80004d8 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80004c0:	79fc      	ldrb	r4, [r7, #7]
 80004c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c6:	4834      	ldr	r0, [pc, #208]	; (8000598 <button_reading+0x13c>)
 80004c8:	f001 fbe8 	bl	8001c9c <HAL_GPIO_ReadPin>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <button_reading+0x138>)
 80004d2:	551a      	strb	r2, [r3, r4]
				break;
 80004d4:	e000      	b.n	80004d8 <button_reading+0x7c>
				break;
 80004d6:	bf00      	nop
		}
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4a2e      	ldr	r2, [pc, #184]	; (8000594 <button_reading+0x138>)
 80004dc:	5cd2      	ldrb	r2, [r2, r3]
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	492a      	ldr	r1, [pc, #168]	; (800058c <button_reading+0x130>)
 80004e2:	5ccb      	ldrb	r3, [r1, r3]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d11c      	bne.n	8000522 <button_reading+0xc6>
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <button_reading+0x138>)
 80004ec:	5cd2      	ldrb	r2, [r2, r3]
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4927      	ldr	r1, [pc, #156]	; (8000590 <button_reading+0x134>)
 80004f2:	5ccb      	ldrb	r3, [r1, r3]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d114      	bne.n	8000522 <button_reading+0xc6>
			if (buttonBuffer[i] == BUTTON_IS_RELEASED && debounceButtonBuffer1[i] == BUTTON_IS_PRESSED) {
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4a28      	ldr	r2, [pc, #160]	; (800059c <button_reading+0x140>)
 80004fc:	5cd3      	ldrb	r3, [r2, r3]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d109      	bne.n	8000516 <button_reading+0xba>
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4a23      	ldr	r2, [pc, #140]	; (8000594 <button_reading+0x138>)
 8000506:	5cd3      	ldrb	r3, [r2, r3]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d104      	bne.n	8000516 <button_reading+0xba>
				button_flag[i] = 1;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <button_reading+0x144>)
 8000510:	2101      	movs	r1, #1
 8000512:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000516:	79fa      	ldrb	r2, [r7, #7]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	491e      	ldr	r1, [pc, #120]	; (8000594 <button_reading+0x138>)
 800051c:	5c89      	ldrb	r1, [r1, r2]
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <button_reading+0x140>)
 8000520:	54d1      	strb	r1, [r2, r3]
		}
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4a1d      	ldr	r2, [pc, #116]	; (800059c <button_reading+0x140>)
 8000526:	5cd3      	ldrb	r3, [r2, r3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d114      	bne.n	8000556 <button_reading+0xfa>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <button_reading+0x148>)
 8000530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000534:	2b63      	cmp	r3, #99	; 0x63
 8000536:	d809      	bhi.n	800054c <button_reading+0xf0>
				counterForButtonPress1s[i]++;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <button_reading+0x148>)
 800053c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000540:	3201      	adds	r2, #1
 8000542:	b291      	uxth	r1, r2
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <button_reading+0x148>)
 8000546:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800054a:	e012      	b.n	8000572 <button_reading+0x116>
			} else {
				flagForButtonPress1s[i] = 1;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <button_reading+0x14c>)
 8000550:	2101      	movs	r1, #1
 8000552:	54d1      	strb	r1, [r2, r3]
 8000554:	e00d      	b.n	8000572 <button_reading+0x116>
			}
		} else {
			button_flag[i] = 0;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <button_reading+0x144>)
 800055a:	2100      	movs	r1, #0
 800055c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[i] = 0;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <button_reading+0x148>)
 8000564:	2100      	movs	r1, #0
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <button_reading+0x14c>)
 800056e:	2100      	movs	r1, #0
 8000570:	54d1      	strb	r1, [r2, r3]
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	3301      	adds	r3, #1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b02      	cmp	r3, #2
 800057c:	f67f af74 	bls.w	8000468 <button_reading+0xc>
		}
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	bf00      	nop
 800058c:	20000050 	.word	0x20000050
 8000590:	20000054 	.word	0x20000054
 8000594:	2000004c 	.word	0x2000004c
 8000598:	40010800 	.word	0x40010800
 800059c:	20000048 	.word	0x20000048
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	2000005c 	.word	0x2000005c
 80005a8:	20000058 	.word	0x20000058

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 f88a 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f818 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f89e 	bl	80006f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005bc:	f000 f850 	bl	8000660 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x34>)
 80005c2:	f001 ffdf 	bl	8002584 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status=INIT;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <main+0x38>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
  setTimer4(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f000 fa8b 	bl	8000ae8 <setTimer4>
  while (1)
  {
    /* USER CODE END WHILE */
	fsm_automatic_run();
 80005d2:	f7ff fdbb 	bl	800014c <fsm_automatic_run>
	fsm_mode();
 80005d6:	f000 f905 	bl	80007e4 <fsm_mode>
	fsm_7SEG();
 80005da:	f7ff feeb 	bl	80003b4 <fsm_7SEG>
	fsm_automatic_run();
 80005de:	e7f8      	b.n	80005d2 <main+0x26>
 80005e0:	20000098 	.word	0x20000098
 80005e4:	20000000 	.word	0x20000000

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b090      	sub	sp, #64	; 0x40
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2228      	movs	r2, #40	; 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fb80 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060a:	2302      	movs	r3, #2
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000616:	2300      	movs	r3, #0
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fb84 	bl	8001d2c <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800062a:	f000 f8d5 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fdf0 	bl	800222c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000652:	f000 f8c1 	bl	80007d8 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3740      	adds	r7, #64	; 0x40
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_TIM2_Init+0x94>)
 800067e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_TIM2_Init+0x94>)
 8000686:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800068a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM2_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_TIM2_Init+0x94>)
 8000694:	220a      	movs	r2, #10
 8000696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_TIM2_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006a6:	f001 ff1d 	bl	80024e4 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006b0:	f000 f892 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006c2:	f002 f8b3 	bl	800282c <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f884 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006de:	f002 fa7f 	bl	8002be0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f876 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000098 	.word	0x20000098

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_GPIO_Init+0xbc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <MX_GPIO_Init+0xbc>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_GPIO_Init+0xbc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_GPIO_Init+0xbc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <MX_GPIO_Init+0xbc>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_GPIO_Init+0xbc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800073c:	2200      	movs	r2, #0
 800073e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000742:	481d      	ldr	r0, [pc, #116]	; (80007b8 <MX_GPIO_Init+0xc0>)
 8000744:	f001 fac1 	bl	8001cca <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000748:	2200      	movs	r2, #0
 800074a:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000750:	f001 fabb 	bl	8001cca <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin PA7_Pin PA8_Pin
                           PA9_Pin PA10_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000754:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000758:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_GPIO_Init+0xc0>)
 800076e:	f001 f91b 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000772:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8000776:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4619      	mov	r1, r3
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_GPIO_Init+0xc4>)
 800078c:	f001 f90c 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000790:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0xc0>)
 80007a6:	f001 f8ff 	bl	80019a8 <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	timerRun();
 80007c8:	f000 f9a2 	bl	8000b10 <timerRun>
	button_reading();
 80007cc:	f7ff fe46 	bl	800045c <button_reading>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <fsm_mode>:
 *      Author: Vostro
 */

#include "mode.h"

void fsm_mode() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	switch (status) {
 80007e8:	4b9b      	ldr	r3, [pc, #620]	; (8000a58 <fsm_mode+0x274>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	f000 80da 	beq.w	80009a6 <fsm_mode+0x1c2>
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	f300 8126 	bgt.w	8000a44 <fsm_mode+0x260>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d002      	beq.n	8000802 <fsm_mode+0x1e>
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d076      	beq.n	80008ee <fsm_mode+0x10a>
				}
			}
		}
		break;
	default:
		break;
 8000800:	e120      	b.n	8000a44 <fsm_mode+0x260>
		if (timer1_flag==1) {
 8000802:	4b96      	ldr	r3, [pc, #600]	; (8000a5c <fsm_mode+0x278>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d105      	bne.n	8000816 <fsm_mode+0x32>
			blinkled(AUTO_RED);
 800080a:	2002      	movs	r0, #2
 800080c:	f000 fe98 	bl	8001540 <blinkled>
			setTimer1(50);
 8000810:	2032      	movs	r0, #50	; 0x32
 8000812:	f000 f92d 	bl	8000a70 <setTimer1>
		if (check_button_flag(0)) {
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fe06 	bl	8000428 <check_button_flag>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00f      	beq.n	8000842 <fsm_mode+0x5e>
			status=3;
 8000822:	4b8d      	ldr	r3, [pc, #564]	; (8000a58 <fsm_mode+0x274>)
 8000824:	2203      	movs	r2, #3
 8000826:	601a      	str	r2, [r3, #0]
			tempt=yellow;
 8000828:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <fsm_mode+0x27c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a8d      	ldr	r2, [pc, #564]	; (8000a64 <fsm_mode+0x280>)
 800082e:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_YELLOW);
 8000830:	2004      	movs	r0, #4
 8000832:	f000 fdcd 	bl	80013d0 <setcolor1>
			setcolor2(AUTO_YELLOW);
 8000836:	2004      	movs	r0, #4
 8000838:	f000 fe26 	bl	8001488 <setcolor2>
			setTimer1(50);
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f000 f917 	bl	8000a70 <setTimer1>
		if (check_button_flag(1)) {
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fdf0 	bl	8000428 <check_button_flag>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <fsm_mode+0x84>
			if (tempt>99) {
 800084e:	4b85      	ldr	r3, [pc, #532]	; (8000a64 <fsm_mode+0x280>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b63      	cmp	r3, #99	; 0x63
 8000854:	dd03      	ble.n	800085e <fsm_mode+0x7a>
				tempt=1;
 8000856:	4b83      	ldr	r3, [pc, #524]	; (8000a64 <fsm_mode+0x280>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e004      	b.n	8000868 <fsm_mode+0x84>
			} else tempt++;
 800085e:	4b81      	ldr	r3, [pc, #516]	; (8000a64 <fsm_mode+0x280>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a7f      	ldr	r2, [pc, #508]	; (8000a64 <fsm_mode+0x280>)
 8000866:	6013      	str	r3, [r2, #0]
		if (check_button_flag(2)) {
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fddd 	bl	8000428 <check_button_flag>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 80e9 	beq.w	8000a48 <fsm_mode+0x264>
			red=tempt;
 8000876:	4b7b      	ldr	r3, [pc, #492]	; (8000a64 <fsm_mode+0x280>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a7b      	ldr	r2, [pc, #492]	; (8000a68 <fsm_mode+0x284>)
 800087c:	6013      	str	r3, [r2, #0]
			if (red>(green+yellow)) {
 800087e:	4b7b      	ldr	r3, [pc, #492]	; (8000a6c <fsm_mode+0x288>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <fsm_mode+0x27c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	441a      	add	r2, r3
 8000888:	4b77      	ldr	r3, [pc, #476]	; (8000a68 <fsm_mode+0x284>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	da07      	bge.n	80008a0 <fsm_mode+0xbc>
				green=red-yellow;
 8000890:	4b75      	ldr	r3, [pc, #468]	; (8000a68 <fsm_mode+0x284>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <fsm_mode+0x27c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	4a74      	ldr	r2, [pc, #464]	; (8000a6c <fsm_mode+0x288>)
 800089c:	6013      	str	r3, [r2, #0]
		break;
 800089e:	e0d3      	b.n	8000a48 <fsm_mode+0x264>
			} else if (red<(green+yellow)) {
 80008a0:	4b72      	ldr	r3, [pc, #456]	; (8000a6c <fsm_mode+0x288>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <fsm_mode+0x27c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	441a      	add	r2, r3
 80008aa:	4b6f      	ldr	r3, [pc, #444]	; (8000a68 <fsm_mode+0x284>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	f340 80ca 	ble.w	8000a48 <fsm_mode+0x264>
				green=red/2;
 80008b4:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <fsm_mode+0x284>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	0fda      	lsrs	r2, r3, #31
 80008ba:	4413      	add	r3, r2
 80008bc:	105b      	asrs	r3, r3, #1
 80008be:	461a      	mov	r2, r3
 80008c0:	4b6a      	ldr	r3, [pc, #424]	; (8000a6c <fsm_mode+0x288>)
 80008c2:	601a      	str	r2, [r3, #0]
				yellow=red/2;
 80008c4:	4b68      	ldr	r3, [pc, #416]	; (8000a68 <fsm_mode+0x284>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0fda      	lsrs	r2, r3, #31
 80008ca:	4413      	add	r3, r2
 80008cc:	105b      	asrs	r3, r3, #1
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b63      	ldr	r3, [pc, #396]	; (8000a60 <fsm_mode+0x27c>)
 80008d2:	601a      	str	r2, [r3, #0]
				if (red%2!=0) {
 80008d4:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <fsm_mode+0x284>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80b3 	beq.w	8000a48 <fsm_mode+0x264>
					green+=1;
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <fsm_mode+0x288>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <fsm_mode+0x288>)
 80008ea:	6013      	str	r3, [r2, #0]
		break;
 80008ec:	e0ac      	b.n	8000a48 <fsm_mode+0x264>
		if (timer1_flag==1) {
 80008ee:	4b5b      	ldr	r3, [pc, #364]	; (8000a5c <fsm_mode+0x278>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d105      	bne.n	8000902 <fsm_mode+0x11e>
			blinkled(AUTO_YELLOW);
 80008f6:	2004      	movs	r0, #4
 80008f8:	f000 fe22 	bl	8001540 <blinkled>
			setTimer1(50);
 80008fc:	2032      	movs	r0, #50	; 0x32
 80008fe:	f000 f8b7 	bl	8000a70 <setTimer1>
		if (check_button_flag(0)) {
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fd90 	bl	8000428 <check_button_flag>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00f      	beq.n	800092e <fsm_mode+0x14a>
			status=4;
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <fsm_mode+0x274>)
 8000910:	2204      	movs	r2, #4
 8000912:	601a      	str	r2, [r3, #0]
			tempt=green;
 8000914:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <fsm_mode+0x288>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <fsm_mode+0x280>)
 800091a:	6013      	str	r3, [r2, #0]
			setcolor1(AUTO_GREEN);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 fd57 	bl	80013d0 <setcolor1>
			setcolor2(AUTO_GREEN);
 8000922:	2003      	movs	r0, #3
 8000924:	f000 fdb0 	bl	8001488 <setcolor2>
			setTimer1(50);
 8000928:	2032      	movs	r0, #50	; 0x32
 800092a:	f000 f8a1 	bl	8000a70 <setTimer1>
		if (check_button_flag(1)) {
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fd7a 	bl	8000428 <check_button_flag>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00c      	beq.n	8000954 <fsm_mode+0x170>
			if (tempt>99) {
 800093a:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <fsm_mode+0x280>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b63      	cmp	r3, #99	; 0x63
 8000940:	dd03      	ble.n	800094a <fsm_mode+0x166>
				tempt=1;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <fsm_mode+0x280>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e004      	b.n	8000954 <fsm_mode+0x170>
			} else tempt++;
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <fsm_mode+0x280>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <fsm_mode+0x280>)
 8000952:	6013      	str	r3, [r2, #0]
		if (check_button_flag(2)) {
 8000954:	2002      	movs	r0, #2
 8000956:	f7ff fd67 	bl	8000428 <check_button_flag>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d075      	beq.n	8000a4c <fsm_mode+0x268>
			yellow=tempt;
 8000960:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <fsm_mode+0x280>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	; (8000a60 <fsm_mode+0x27c>)
 8000966:	6013      	str	r3, [r2, #0]
			if (red!= (green+yellow)) {
 8000968:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <fsm_mode+0x288>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <fsm_mode+0x27c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	441a      	add	r2, r3
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <fsm_mode+0x284>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d068      	beq.n	8000a4c <fsm_mode+0x268>
				red=green+yellow;
 800097a:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <fsm_mode+0x288>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <fsm_mode+0x27c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <fsm_mode+0x284>)
 8000986:	6013      	str	r3, [r2, #0]
				if (red>99) {
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <fsm_mode+0x284>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b63      	cmp	r3, #99	; 0x63
 800098e:	dd5d      	ble.n	8000a4c <fsm_mode+0x268>
					red=99;
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <fsm_mode+0x284>)
 8000992:	2263      	movs	r2, #99	; 0x63
 8000994:	601a      	str	r2, [r3, #0]
					green=red-yellow;
 8000996:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <fsm_mode+0x284>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <fsm_mode+0x27c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <fsm_mode+0x288>)
 80009a2:	6013      	str	r3, [r2, #0]
		break;
 80009a4:	e052      	b.n	8000a4c <fsm_mode+0x268>
		if (timer1_flag==1) {
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <fsm_mode+0x278>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d105      	bne.n	80009ba <fsm_mode+0x1d6>
			blinkled(AUTO_GREEN);
 80009ae:	2003      	movs	r0, #3
 80009b0:	f000 fdc6 	bl	8001540 <blinkled>
			setTimer1(50);
 80009b4:	2032      	movs	r0, #50	; 0x32
 80009b6:	f000 f85b 	bl	8000a70 <setTimer1>
		if (check_button_flag(0)) {
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fd34 	bl	8000428 <check_button_flag>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <fsm_mode+0x1e8>
			status=INIT;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <fsm_mode+0x274>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
		if (check_button_flag(1)) {
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fd2b 	bl	8000428 <check_button_flag>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00c      	beq.n	80009f2 <fsm_mode+0x20e>
			if (tempt>99) {
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <fsm_mode+0x280>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	dd03      	ble.n	80009e8 <fsm_mode+0x204>
				tempt=1;
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <fsm_mode+0x280>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e004      	b.n	80009f2 <fsm_mode+0x20e>
			} else tempt++;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <fsm_mode+0x280>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <fsm_mode+0x280>)
 80009f0:	6013      	str	r3, [r2, #0]
		if (check_button_flag(2)) {
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fd18 	bl	8000428 <check_button_flag>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d028      	beq.n	8000a50 <fsm_mode+0x26c>
			green=tempt;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <fsm_mode+0x280>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <fsm_mode+0x288>)
 8000a04:	6013      	str	r3, [r2, #0]
			if (red!= (green+yellow)) {
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <fsm_mode+0x288>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <fsm_mode+0x27c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	441a      	add	r2, r3
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <fsm_mode+0x284>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d01b      	beq.n	8000a50 <fsm_mode+0x26c>
				red=green+yellow;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <fsm_mode+0x288>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <fsm_mode+0x27c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <fsm_mode+0x284>)
 8000a24:	6013      	str	r3, [r2, #0]
				if (red>99) {
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <fsm_mode+0x284>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b63      	cmp	r3, #99	; 0x63
 8000a2c:	dd10      	ble.n	8000a50 <fsm_mode+0x26c>
					red=99;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <fsm_mode+0x284>)
 8000a30:	2263      	movs	r2, #99	; 0x63
 8000a32:	601a      	str	r2, [r3, #0]
					yellow=red-green;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <fsm_mode+0x284>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <fsm_mode+0x288>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <fsm_mode+0x27c>)
 8000a40:	6013      	str	r3, [r2, #0]
		break;
 8000a42:	e005      	b.n	8000a50 <fsm_mode+0x26c>
		break;
 8000a44:	bf00      	nop
 8000a46:	e004      	b.n	8000a52 <fsm_mode+0x26e>
		break;
 8000a48:	bf00      	nop
 8000a4a:	e002      	b.n	8000a52 <fsm_mode+0x26e>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e000      	b.n	8000a52 <fsm_mode+0x26e>
		break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000068 	.word	0x20000068
 8000a60:	20000010 	.word	0x20000010
 8000a64:	20000018 	.word	0x20000018
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000014 	.word	0x20000014

08000a70 <setTimer1>:
int timer4_flag=0;

int timer5_counter=0;
int timer5_flag=0;

void setTimer1(int duration) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <setTimer1+0x20>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <setTimer1+0x24>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000064 	.word	0x20000064
 8000a94:	20000068 	.word	0x20000068

08000a98 <setTimer2>:

void setTimer2(int duration) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000aa0:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <setTimer2+0x20>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <setTimer2+0x24>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	2000006c 	.word	0x2000006c
 8000abc:	20000070 	.word	0x20000070

08000ac0 <setTimer3>:

void setTimer3(int duration) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <setTimer3+0x20>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <setTimer3+0x24>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000074 	.word	0x20000074
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <setTimer4>:

void setTimer4(int duration) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <setTimer4+0x20>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <setTimer4+0x24>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000007c 	.word	0x2000007c
 8000b0c:	20000080 	.word	0x20000080

08000b10 <timerRun>:
void setTimer5(int duration) {
	timer5_counter=duration;
	timer5_flag=0;
}

void timerRun() {
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <timerRun+0xac>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dd0b      	ble.n	8000b34 <timerRun+0x24>
		timer1_counter--;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <timerRun+0xac>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <timerRun+0xac>)
 8000b24:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <timerRun+0xac>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dc02      	bgt.n	8000b34 <timerRun+0x24>
			timer1_flag=1;
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <timerRun+0xb0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <timerRun+0xb4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dd0b      	ble.n	8000b54 <timerRun+0x44>
		timer2_counter--;
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <timerRun+0xb4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <timerRun+0xb4>)
 8000b44:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <timerRun+0xb4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dc02      	bgt.n	8000b54 <timerRun+0x44>
			timer2_flag=1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <timerRun+0xb8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <timerRun+0xbc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd0b      	ble.n	8000b74 <timerRun+0x64>
		timer3_counter--;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <timerRun+0xbc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <timerRun+0xbc>)
 8000b64:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <timerRun+0xbc>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dc02      	bgt.n	8000b74 <timerRun+0x64>
			timer3_flag=1;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <timerRun+0xc0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <timerRun+0xc4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dd0b      	ble.n	8000b94 <timerRun+0x84>
		timer4_counter--;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <timerRun+0xc4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <timerRun+0xc4>)
 8000b84:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <timerRun+0xc4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dc02      	bgt.n	8000b94 <timerRun+0x84>
			timer4_flag=1;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <timerRun+0xc8>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <timerRun+0xcc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dd0b      	ble.n	8000bb4 <timerRun+0xa4>
		timer5_counter--;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <timerRun+0xcc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <timerRun+0xcc>)
 8000ba4:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <timerRun+0xcc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dc02      	bgt.n	8000bb4 <timerRun+0xa4>
			timer5_flag=1;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <timerRun+0xd0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000064 	.word	0x20000064
 8000bc0:	20000068 	.word	0x20000068
 8000bc4:	2000006c 	.word	0x2000006c
 8000bc8:	20000070 	.word	0x20000070
 8000bcc:	20000074 	.word	0x20000074
 8000bd0:	20000078 	.word	0x20000078
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000084 	.word	0x20000084
 8000be0:	20000088 	.word	0x20000088

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201c      	movs	r0, #28
 8000c78:	f000 fe5f 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c7c:	201c      	movs	r0, #28
 8000c7e:	f000 fe78 	bl	8001972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 fd3d 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM2_IRQHandler+0x10>)
 8000ce6:	f001 fc99 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000098 	.word	0x20000098

08000cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <display7SEG>:
 *      Author: Vostro
 */

#include "traffic.h"

void display7SEG(int counter) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d123      	bne.n	8000d56 <display7SEG+0x56>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2101      	movs	r1, #1
 8000d12:	48c2      	ldr	r0, [pc, #776]	; (800101c <display7SEG+0x31c>)
 8000d14:	f000 ffd9 	bl	8001cca <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	48bf      	ldr	r0, [pc, #764]	; (800101c <display7SEG+0x31c>)
 8000d1e:	f000 ffd4 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	48bd      	ldr	r0, [pc, #756]	; (800101c <display7SEG+0x31c>)
 8000d28:	f000 ffcf 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2108      	movs	r1, #8
 8000d30:	48ba      	ldr	r0, [pc, #744]	; (800101c <display7SEG+0x31c>)
 8000d32:	f000 ffca 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	48b8      	ldr	r0, [pc, #736]	; (800101c <display7SEG+0x31c>)
 8000d3c:	f000 ffc5 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2120      	movs	r1, #32
 8000d44:	48b5      	ldr	r0, [pc, #724]	; (800101c <display7SEG+0x31c>)
 8000d46:	f000 ffc0 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	48b3      	ldr	r0, [pc, #716]	; (800101c <display7SEG+0x31c>)
 8000d50:	f000 ffbb 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
	}
}
 8000d54:	e15d      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 1) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d123      	bne.n	8000da4 <display7SEG+0xa4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2101      	movs	r1, #1
 8000d60:	48ae      	ldr	r0, [pc, #696]	; (800101c <display7SEG+0x31c>)
 8000d62:	f000 ffb2 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2102      	movs	r1, #2
 8000d6a:	48ac      	ldr	r0, [pc, #688]	; (800101c <display7SEG+0x31c>)
 8000d6c:	f000 ffad 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2104      	movs	r1, #4
 8000d74:	48a9      	ldr	r0, [pc, #676]	; (800101c <display7SEG+0x31c>)
 8000d76:	f000 ffa8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	48a7      	ldr	r0, [pc, #668]	; (800101c <display7SEG+0x31c>)
 8000d80:	f000 ffa3 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	48a4      	ldr	r0, [pc, #656]	; (800101c <display7SEG+0x31c>)
 8000d8a:	f000 ff9e 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2110      	movs	r1, #16
 8000d92:	48a2      	ldr	r0, [pc, #648]	; (800101c <display7SEG+0x31c>)
 8000d94:	f000 ff99 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	489f      	ldr	r0, [pc, #636]	; (800101c <display7SEG+0x31c>)
 8000d9e:	f000 ff94 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000da2:	e136      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 2) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <display7SEG+0xf2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2102      	movs	r1, #2
 8000dae:	489b      	ldr	r0, [pc, #620]	; (800101c <display7SEG+0x31c>)
 8000db0:	f000 ff8b 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	4898      	ldr	r0, [pc, #608]	; (800101c <display7SEG+0x31c>)
 8000dba:	f000 ff86 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4896      	ldr	r0, [pc, #600]	; (800101c <display7SEG+0x31c>)
 8000dc4:	f000 ff81 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4893      	ldr	r0, [pc, #588]	; (800101c <display7SEG+0x31c>)
 8000dce:	f000 ff7c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4891      	ldr	r0, [pc, #580]	; (800101c <display7SEG+0x31c>)
 8000dd8:	f000 ff77 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2120      	movs	r1, #32
 8000de0:	488e      	ldr	r0, [pc, #568]	; (800101c <display7SEG+0x31c>)
 8000de2:	f000 ff72 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	488c      	ldr	r0, [pc, #560]	; (800101c <display7SEG+0x31c>)
 8000dec:	f000 ff6d 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000df0:	e10f      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 3) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d123      	bne.n	8000e40 <display7SEG+0x140>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4887      	ldr	r0, [pc, #540]	; (800101c <display7SEG+0x31c>)
 8000dfe:	f000 ff64 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2104      	movs	r1, #4
 8000e06:	4885      	ldr	r0, [pc, #532]	; (800101c <display7SEG+0x31c>)
 8000e08:	f000 ff5f 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4882      	ldr	r0, [pc, #520]	; (800101c <display7SEG+0x31c>)
 8000e12:	f000 ff5a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4880      	ldr	r0, [pc, #512]	; (800101c <display7SEG+0x31c>)
 8000e1c:	f000 ff55 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	487d      	ldr	r0, [pc, #500]	; (800101c <display7SEG+0x31c>)
 8000e26:	f000 ff50 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	487b      	ldr	r0, [pc, #492]	; (800101c <display7SEG+0x31c>)
 8000e30:	f000 ff4b 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	4878      	ldr	r0, [pc, #480]	; (800101c <display7SEG+0x31c>)
 8000e3a:	f000 ff46 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000e3e:	e0e8      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 4) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d123      	bne.n	8000e8e <display7SEG+0x18e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4874      	ldr	r0, [pc, #464]	; (800101c <display7SEG+0x31c>)
 8000e4c:	f000 ff3d 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2108      	movs	r1, #8
 8000e54:	4871      	ldr	r0, [pc, #452]	; (800101c <display7SEG+0x31c>)
 8000e56:	f000 ff38 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	486f      	ldr	r0, [pc, #444]	; (800101c <display7SEG+0x31c>)
 8000e60:	f000 ff33 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	486c      	ldr	r0, [pc, #432]	; (800101c <display7SEG+0x31c>)
 8000e6a:	f000 ff2e 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	486a      	ldr	r0, [pc, #424]	; (800101c <display7SEG+0x31c>)
 8000e74:	f000 ff29 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4867      	ldr	r0, [pc, #412]	; (800101c <display7SEG+0x31c>)
 8000e7e:	f000 ff24 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	4865      	ldr	r0, [pc, #404]	; (800101c <display7SEG+0x31c>)
 8000e88:	f000 ff1f 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000e8c:	e0c1      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 5) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d123      	bne.n	8000edc <display7SEG+0x1dc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2104      	movs	r1, #4
 8000e98:	4860      	ldr	r0, [pc, #384]	; (800101c <display7SEG+0x31c>)
 8000e9a:	f000 ff16 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	485e      	ldr	r0, [pc, #376]	; (800101c <display7SEG+0x31c>)
 8000ea4:	f000 ff11 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	485b      	ldr	r0, [pc, #364]	; (800101c <display7SEG+0x31c>)
 8000eae:	f000 ff0c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4859      	ldr	r0, [pc, #356]	; (800101c <display7SEG+0x31c>)
 8000eb8:	f000 ff07 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4856      	ldr	r0, [pc, #344]	; (800101c <display7SEG+0x31c>)
 8000ec2:	f000 ff02 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4854      	ldr	r0, [pc, #336]	; (800101c <display7SEG+0x31c>)
 8000ecc:	f000 fefd 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4851      	ldr	r0, [pc, #324]	; (800101c <display7SEG+0x31c>)
 8000ed6:	f000 fef8 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000eda:	e09a      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 6) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d123      	bne.n	8000f2a <display7SEG+0x22a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	484d      	ldr	r0, [pc, #308]	; (800101c <display7SEG+0x31c>)
 8000ee8:	f000 feef 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2101      	movs	r1, #1
 8000ef0:	484a      	ldr	r0, [pc, #296]	; (800101c <display7SEG+0x31c>)
 8000ef2:	f000 feea 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4848      	ldr	r0, [pc, #288]	; (800101c <display7SEG+0x31c>)
 8000efc:	f000 fee5 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	4845      	ldr	r0, [pc, #276]	; (800101c <display7SEG+0x31c>)
 8000f06:	f000 fee0 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4843      	ldr	r0, [pc, #268]	; (800101c <display7SEG+0x31c>)
 8000f10:	f000 fedb 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	4840      	ldr	r0, [pc, #256]	; (800101c <display7SEG+0x31c>)
 8000f1a:	f000 fed6 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	483e      	ldr	r0, [pc, #248]	; (800101c <display7SEG+0x31c>)
 8000f24:	f000 fed1 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000f28:	e073      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 7) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d123      	bne.n	8000f78 <display7SEG+0x278>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2101      	movs	r1, #1
 8000f34:	4839      	ldr	r0, [pc, #228]	; (800101c <display7SEG+0x31c>)
 8000f36:	f000 fec8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4837      	ldr	r0, [pc, #220]	; (800101c <display7SEG+0x31c>)
 8000f40:	f000 fec3 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	4834      	ldr	r0, [pc, #208]	; (800101c <display7SEG+0x31c>)
 8000f4a:	f000 febe 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2108      	movs	r1, #8
 8000f52:	4832      	ldr	r0, [pc, #200]	; (800101c <display7SEG+0x31c>)
 8000f54:	f000 feb9 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	482f      	ldr	r0, [pc, #188]	; (800101c <display7SEG+0x31c>)
 8000f5e:	f000 feb4 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	482d      	ldr	r0, [pc, #180]	; (800101c <display7SEG+0x31c>)
 8000f68:	f000 feaf 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	482a      	ldr	r0, [pc, #168]	; (800101c <display7SEG+0x31c>)
 8000f72:	f000 feaa 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000f76:	e04c      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 8) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d123      	bne.n	8000fc6 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	4826      	ldr	r0, [pc, #152]	; (800101c <display7SEG+0x31c>)
 8000f84:	f000 fea1 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <display7SEG+0x31c>)
 8000f8e:	f000 fe9c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2104      	movs	r1, #4
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <display7SEG+0x31c>)
 8000f98:	f000 fe97 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	481e      	ldr	r0, [pc, #120]	; (800101c <display7SEG+0x31c>)
 8000fa2:	f000 fe92 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2110      	movs	r1, #16
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <display7SEG+0x31c>)
 8000fac:	f000 fe8d 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4819      	ldr	r0, [pc, #100]	; (800101c <display7SEG+0x31c>)
 8000fb6:	f000 fe88 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	4817      	ldr	r0, [pc, #92]	; (800101c <display7SEG+0x31c>)
 8000fc0:	f000 fe83 	bl	8001cca <HAL_GPIO_WritePin>
}
 8000fc4:	e025      	b.n	8001012 <display7SEG+0x312>
	} else if (counter == 9) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d122      	bne.n	8001012 <display7SEG+0x312>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <display7SEG+0x31c>)
 8000fd2:	f000 fe7a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4810      	ldr	r0, [pc, #64]	; (800101c <display7SEG+0x31c>)
 8000fdc:	f000 fe75 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <display7SEG+0x31c>)
 8000fe6:	f000 fe70 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2108      	movs	r1, #8
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <display7SEG+0x31c>)
 8000ff0:	f000 fe6b 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <display7SEG+0x31c>)
 8000ffa:	f000 fe66 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2120      	movs	r1, #32
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <display7SEG+0x31c>)
 8001004:	f000 fe61 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	; 0x40
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <display7SEG+0x31c>)
 800100e:	f000 fe5c 	bl	8001cca <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010c00 	.word	0x40010c00

08001020 <display7SEG_2>:

void display7SEG_2(int counter) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (counter == 0) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d12a      	bne.n	8001084 <display7SEG_2+0x64>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	48cb      	ldr	r0, [pc, #812]	; (8001364 <display7SEG_2+0x344>)
 8001036:	f000 fe48 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	48c8      	ldr	r0, [pc, #800]	; (8001364 <display7SEG_2+0x344>)
 8001042:	f000 fe42 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	48c5      	ldr	r0, [pc, #788]	; (8001364 <display7SEG_2+0x344>)
 800104e:	f000 fe3c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001058:	48c2      	ldr	r0, [pc, #776]	; (8001364 <display7SEG_2+0x344>)
 800105a:	f000 fe36 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	48bf      	ldr	r0, [pc, #764]	; (8001364 <display7SEG_2+0x344>)
 8001066:	f000 fe30 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001070:	48bc      	ldr	r0, [pc, #752]	; (8001364 <display7SEG_2+0x344>)
 8001072:	f000 fe2a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107c:	48b9      	ldr	r0, [pc, #740]	; (8001364 <display7SEG_2+0x344>)
 800107e:	f000 fe24 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
	}
}
 8001082:	e19e      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 1) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d12a      	bne.n	80010e0 <display7SEG_2+0xc0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	48b4      	ldr	r0, [pc, #720]	; (8001364 <display7SEG_2+0x344>)
 8001092:	f000 fe1a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	48b1      	ldr	r0, [pc, #708]	; (8001364 <display7SEG_2+0x344>)
 800109e:	f000 fe14 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a8:	48ae      	ldr	r0, [pc, #696]	; (8001364 <display7SEG_2+0x344>)
 80010aa:	f000 fe0e 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b4:	48ab      	ldr	r0, [pc, #684]	; (8001364 <display7SEG_2+0x344>)
 80010b6:	f000 fe08 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c0:	48a8      	ldr	r0, [pc, #672]	; (8001364 <display7SEG_2+0x344>)
 80010c2:	f000 fe02 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010cc:	48a5      	ldr	r0, [pc, #660]	; (8001364 <display7SEG_2+0x344>)
 80010ce:	f000 fdfc 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d8:	48a2      	ldr	r0, [pc, #648]	; (8001364 <display7SEG_2+0x344>)
 80010da:	f000 fdf6 	bl	8001cca <HAL_GPIO_WritePin>
}
 80010de:	e170      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d12a      	bne.n	800113c <display7SEG_2+0x11c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	489d      	ldr	r0, [pc, #628]	; (8001364 <display7SEG_2+0x344>)
 80010ee:	f000 fdec 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	489a      	ldr	r0, [pc, #616]	; (8001364 <display7SEG_2+0x344>)
 80010fa:	f000 fde6 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4897      	ldr	r0, [pc, #604]	; (8001364 <display7SEG_2+0x344>)
 8001106:	f000 fde0 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	4894      	ldr	r0, [pc, #592]	; (8001364 <display7SEG_2+0x344>)
 8001112:	f000 fdda 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	4891      	ldr	r0, [pc, #580]	; (8001364 <display7SEG_2+0x344>)
 800111e:	f000 fdd4 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001128:	488e      	ldr	r0, [pc, #568]	; (8001364 <display7SEG_2+0x344>)
 800112a:	f000 fdce 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	488b      	ldr	r0, [pc, #556]	; (8001364 <display7SEG_2+0x344>)
 8001136:	f000 fdc8 	bl	8001cca <HAL_GPIO_WritePin>
}
 800113a:	e142      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 3) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d12a      	bne.n	8001198 <display7SEG_2+0x178>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001148:	4886      	ldr	r0, [pc, #536]	; (8001364 <display7SEG_2+0x344>)
 800114a:	f000 fdbe 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001154:	4883      	ldr	r0, [pc, #524]	; (8001364 <display7SEG_2+0x344>)
 8001156:	f000 fdb8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4880      	ldr	r0, [pc, #512]	; (8001364 <display7SEG_2+0x344>)
 8001162:	f000 fdb2 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	487d      	ldr	r0, [pc, #500]	; (8001364 <display7SEG_2+0x344>)
 800116e:	f000 fdac 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	487a      	ldr	r0, [pc, #488]	; (8001364 <display7SEG_2+0x344>)
 800117a:	f000 fda6 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <display7SEG_2+0x344>)
 8001186:	f000 fda0 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	4874      	ldr	r0, [pc, #464]	; (8001364 <display7SEG_2+0x344>)
 8001192:	f000 fd9a 	bl	8001cca <HAL_GPIO_WritePin>
}
 8001196:	e114      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 4) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d12a      	bne.n	80011f4 <display7SEG_2+0x1d4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a4:	486f      	ldr	r0, [pc, #444]	; (8001364 <display7SEG_2+0x344>)
 80011a6:	f000 fd90 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b0:	486c      	ldr	r0, [pc, #432]	; (8001364 <display7SEG_2+0x344>)
 80011b2:	f000 fd8a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011bc:	4869      	ldr	r0, [pc, #420]	; (8001364 <display7SEG_2+0x344>)
 80011be:	f000 fd84 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	4866      	ldr	r0, [pc, #408]	; (8001364 <display7SEG_2+0x344>)
 80011ca:	f000 fd7e 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	4863      	ldr	r0, [pc, #396]	; (8001364 <display7SEG_2+0x344>)
 80011d6:	f000 fd78 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4860      	ldr	r0, [pc, #384]	; (8001364 <display7SEG_2+0x344>)
 80011e2:	f000 fd72 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ec:	485d      	ldr	r0, [pc, #372]	; (8001364 <display7SEG_2+0x344>)
 80011ee:	f000 fd6c 	bl	8001cca <HAL_GPIO_WritePin>
}
 80011f2:	e0e6      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 5) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d12a      	bne.n	8001250 <display7SEG_2+0x230>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	4858      	ldr	r0, [pc, #352]	; (8001364 <display7SEG_2+0x344>)
 8001202:	f000 fd62 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120c:	4855      	ldr	r0, [pc, #340]	; (8001364 <display7SEG_2+0x344>)
 800120e:	f000 fd5c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001218:	4852      	ldr	r0, [pc, #328]	; (8001364 <display7SEG_2+0x344>)
 800121a:	f000 fd56 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	484f      	ldr	r0, [pc, #316]	; (8001364 <display7SEG_2+0x344>)
 8001226:	f000 fd50 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001230:	484c      	ldr	r0, [pc, #304]	; (8001364 <display7SEG_2+0x344>)
 8001232:	f000 fd4a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	4849      	ldr	r0, [pc, #292]	; (8001364 <display7SEG_2+0x344>)
 800123e:	f000 fd44 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001248:	4846      	ldr	r0, [pc, #280]	; (8001364 <display7SEG_2+0x344>)
 800124a:	f000 fd3e 	bl	8001cca <HAL_GPIO_WritePin>
}
 800124e:	e0b8      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 6) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d12a      	bne.n	80012ac <display7SEG_2+0x28c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125c:	4841      	ldr	r0, [pc, #260]	; (8001364 <display7SEG_2+0x344>)
 800125e:	f000 fd34 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	483e      	ldr	r0, [pc, #248]	; (8001364 <display7SEG_2+0x344>)
 800126a:	f000 fd2e 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001274:	483b      	ldr	r0, [pc, #236]	; (8001364 <display7SEG_2+0x344>)
 8001276:	f000 fd28 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001280:	4838      	ldr	r0, [pc, #224]	; (8001364 <display7SEG_2+0x344>)
 8001282:	f000 fd22 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800128c:	4835      	ldr	r0, [pc, #212]	; (8001364 <display7SEG_2+0x344>)
 800128e:	f000 fd1c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	4832      	ldr	r0, [pc, #200]	; (8001364 <display7SEG_2+0x344>)
 800129a:	f000 fd16 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a4:	482f      	ldr	r0, [pc, #188]	; (8001364 <display7SEG_2+0x344>)
 80012a6:	f000 fd10 	bl	8001cca <HAL_GPIO_WritePin>
}
 80012aa:	e08a      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 7) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d12a      	bne.n	8001308 <display7SEG_2+0x2e8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b8:	482a      	ldr	r0, [pc, #168]	; (8001364 <display7SEG_2+0x344>)
 80012ba:	f000 fd06 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c4:	4827      	ldr	r0, [pc, #156]	; (8001364 <display7SEG_2+0x344>)
 80012c6:	f000 fd00 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d0:	4824      	ldr	r0, [pc, #144]	; (8001364 <display7SEG_2+0x344>)
 80012d2:	f000 fcfa 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012dc:	4821      	ldr	r0, [pc, #132]	; (8001364 <display7SEG_2+0x344>)
 80012de:	f000 fcf4 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	481e      	ldr	r0, [pc, #120]	; (8001364 <display7SEG_2+0x344>)
 80012ea:	f000 fcee 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <display7SEG_2+0x344>)
 80012f6:	f000 fce8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <display7SEG_2+0x344>)
 8001302:	f000 fce2 	bl	8001cca <HAL_GPIO_WritePin>
}
 8001306:	e05c      	b.n	80013c2 <display7SEG_2+0x3a2>
	} else if (counter == 8) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d12c      	bne.n	8001368 <display7SEG_2+0x348>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <display7SEG_2+0x344>)
 8001316:	f000 fcd8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <display7SEG_2+0x344>)
 8001322:	f000 fcd2 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <display7SEG_2+0x344>)
 800132e:	f000 fccc 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <display7SEG_2+0x344>)
 800133a:	f000 fcc6 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <display7SEG_2+0x344>)
 8001346:	f000 fcc0 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <display7SEG_2+0x344>)
 8001352:	f000 fcba 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135c:	4801      	ldr	r0, [pc, #4]	; (8001364 <display7SEG_2+0x344>)
 800135e:	f000 fcb4 	bl	8001cca <HAL_GPIO_WritePin>
}
 8001362:	e02e      	b.n	80013c2 <display7SEG_2+0x3a2>
 8001364:	40010c00 	.word	0x40010c00
	} else if (counter == 9) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b09      	cmp	r3, #9
 800136c:	d129      	bne.n	80013c2 <display7SEG_2+0x3a2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <display7SEG_2+0x3ac>)
 8001376:	f000 fca8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	4812      	ldr	r0, [pc, #72]	; (80013cc <display7SEG_2+0x3ac>)
 8001382:	f000 fca2 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <display7SEG_2+0x3ac>)
 800138e:	f000 fc9c 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <display7SEG_2+0x3ac>)
 800139a:	f000 fc96 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <display7SEG_2+0x3ac>)
 80013a6:	f000 fc90 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <display7SEG_2+0x3ac>)
 80013b2:	f000 fc8a 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <display7SEG_2+0x3ac>)
 80013be:	f000 fc84 	bl	8001cca <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40010c00 	.word	0x40010c00

080013d0 <setcolor1>:

void setcolor1(int color){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d84b      	bhi.n	8001478 <setcolor1+0xa8>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <setcolor1+0x18>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	08001419 	.word	0x08001419
 80013f0:	08001459 	.word	0x08001459
 80013f4:	08001439 	.word	0x08001439
	switch (color) {
	case INIT:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	4821      	ldr	r0, [pc, #132]	; (8001484 <setcolor1+0xb4>)
 80013fe:	f000 fc64 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2104      	movs	r1, #4
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <setcolor1+0xb4>)
 8001408:	f000 fc5f 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2108      	movs	r1, #8
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <setcolor1+0xb4>)
 8001412:	f000 fc5a 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 8001416:	e030      	b.n	800147a <setcolor1+0xaa>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <setcolor1+0xb4>)
 800141e:	f000 fc54 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2104      	movs	r1, #4
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <setcolor1+0xb4>)
 8001428:	f000 fc4f 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2108      	movs	r1, #8
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <setcolor1+0xb4>)
 8001432:	f000 fc4a 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 8001436:	e020      	b.n	800147a <setcolor1+0xaa>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <setcolor1+0xb4>)
 800143e:	f000 fc44 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2104      	movs	r1, #4
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <setcolor1+0xb4>)
 8001448:	f000 fc3f 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2108      	movs	r1, #8
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <setcolor1+0xb4>)
 8001452:	f000 fc3a 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 8001456:	e010      	b.n	800147a <setcolor1+0xaa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin,SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <setcolor1+0xb4>)
 800145e:	f000 fc34 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin,SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2104      	movs	r1, #4
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <setcolor1+0xb4>)
 8001468:	f000 fc2f 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin,RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2108      	movs	r1, #8
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <setcolor1+0xb4>)
 8001472:	f000 fc2a 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 8001476:	e000      	b.n	800147a <setcolor1+0xaa>
	default:
		break;
 8001478:	bf00      	nop
	}
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010800 	.word	0x40010800

08001488 <setcolor2>:

void setcolor2(int color) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	2b03      	cmp	r3, #3
 8001496:	d84b      	bhi.n	8001530 <setcolor2+0xa8>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <setcolor2+0x18>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	08001511 	.word	0x08001511
 80014ac:	080014f1 	.word	0x080014f1
	switch (color) {
	case INIT:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	4821      	ldr	r0, [pc, #132]	; (800153c <setcolor2+0xb4>)
 80014b6:	f000 fc08 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	481f      	ldr	r0, [pc, #124]	; (800153c <setcolor2+0xb4>)
 80014c0:	f000 fc03 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	481c      	ldr	r0, [pc, #112]	; (800153c <setcolor2+0xb4>)
 80014ca:	f000 fbfe 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 80014ce:	e030      	b.n	8001532 <setcolor2+0xaa>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2110      	movs	r1, #16
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <setcolor2+0xb4>)
 80014d6:	f000 fbf8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2120      	movs	r1, #32
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <setcolor2+0xb4>)
 80014e0:	f000 fbf3 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <setcolor2+0xb4>)
 80014ea:	f000 fbee 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 80014ee:	e020      	b.n	8001532 <setcolor2+0xaa>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2110      	movs	r1, #16
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <setcolor2+0xb4>)
 80014f6:	f000 fbe8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2120      	movs	r1, #32
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <setcolor2+0xb4>)
 8001500:	f000 fbe3 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <setcolor2+0xb4>)
 800150a:	f000 fbde 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 800150e:	e010      	b.n	8001532 <setcolor2+0xaa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin,SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2110      	movs	r1, #16
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <setcolor2+0xb4>)
 8001516:	f000 fbd8 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin,SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <setcolor2+0xb4>)
 8001520:	f000 fbd3 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin,RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <setcolor2+0xb4>)
 800152a:	f000 fbce 	bl	8001cca <HAL_GPIO_WritePin>
		break;
 800152e:	e000      	b.n	8001532 <setcolor2+0xaa>
	default:
		break;
 8001530:	bf00      	nop
	}
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800

08001540 <blinkled>:

void blinkled(int color) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d01b      	beq.n	8001586 <blinkled+0x46>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b04      	cmp	r3, #4
 8001552:	dc21      	bgt.n	8001598 <blinkled+0x58>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d003      	beq.n	8001562 <blinkled+0x22>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d009      	beq.n	8001574 <blinkled+0x34>
	case AUTO_YELLOW:
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port,YELLOW1_Pin);
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port,YELLOW2_Pin);
		break;
	default:
		break;
 8001560:	e01a      	b.n	8001598 <blinkled+0x58>
		HAL_GPIO_TogglePin(RED1_GPIO_Port,RED1_Pin);
 8001562:	2102      	movs	r1, #2
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <blinkled+0x64>)
 8001566:	f000 fbc8 	bl	8001cfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port,RED2_Pin);
 800156a:	2110      	movs	r1, #16
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <blinkled+0x64>)
 800156e:	f000 fbc4 	bl	8001cfa <HAL_GPIO_TogglePin>
		break;
 8001572:	e012      	b.n	800159a <blinkled+0x5a>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port,GREEN1_Pin);
 8001574:	2108      	movs	r1, #8
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <blinkled+0x64>)
 8001578:	f000 fbbf 	bl	8001cfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port,GREEN2_Pin);
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <blinkled+0x64>)
 8001580:	f000 fbbb 	bl	8001cfa <HAL_GPIO_TogglePin>
		break;
 8001584:	e009      	b.n	800159a <blinkled+0x5a>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port,YELLOW1_Pin);
 8001586:	2104      	movs	r1, #4
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <blinkled+0x64>)
 800158a:	f000 fbb6 	bl	8001cfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port,YELLOW2_Pin);
 800158e:	2120      	movs	r1, #32
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <blinkled+0x64>)
 8001592:	f000 fbb2 	bl	8001cfa <HAL_GPIO_TogglePin>
		break;
 8001596:	e000      	b.n	800159a <blinkled+0x5a>
		break;
 8001598:	bf00      	nop
	}
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010800 	.word	0x40010800

080015a8 <scan7SEG>:

int state7SEG=1;
void scan7SEG(int counter1, int counter2) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	int one=counter1/10;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <scan7SEG+0xc8>)
 80015b6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ba:	1092      	asrs	r2, r2, #2
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
	int two=counter1%10;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <scan7SEG+0xc8>)
 80015c6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ca:	1099      	asrs	r1, r3, #2
 80015cc:	17d3      	asrs	r3, r2, #31
 80015ce:	1ac9      	subs	r1, r1, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	613b      	str	r3, [r7, #16]

	int three=counter2/10;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4a24      	ldr	r2, [pc, #144]	; (8001670 <scan7SEG+0xc8>)
 80015e0:	fb82 1203 	smull	r1, r2, r2, r3
 80015e4:	1092      	asrs	r2, r2, #2
 80015e6:	17db      	asrs	r3, r3, #31
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
	int four=counter2%10;
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <scan7SEG+0xc8>)
 80015f0:	fb83 1302 	smull	r1, r3, r3, r2
 80015f4:	1099      	asrs	r1, r3, #2
 80015f6:	17d3      	asrs	r3, r2, #31
 80015f8:	1ac9      	subs	r1, r1, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	60bb      	str	r3, [r7, #8]

	switch(state7SEG) {
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <scan7SEG+0xcc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d002      	beq.n	8001614 <scan7SEG+0x6c>
 800160e:	2b02      	cmp	r3, #2
 8001610:	d015      	beq.n	800163e <scan7SEG+0x96>
		display7SEG(one);
		display7SEG_2(three);
		state7SEG=1;
		break;
	default:
		break;
 8001612:	e029      	b.n	8001668 <scan7SEG+0xc0>
		HAL_GPIO_WritePin(PA7_GPIO_Port,PA7_Pin,SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4817      	ldr	r0, [pc, #92]	; (8001678 <scan7SEG+0xd0>)
 800161a:	f000 fb56 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port,PA8_Pin,RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4814      	ldr	r0, [pc, #80]	; (8001678 <scan7SEG+0xd0>)
 8001626:	f000 fb50 	bl	8001cca <HAL_GPIO_WritePin>
		display7SEG(two);
 800162a:	6938      	ldr	r0, [r7, #16]
 800162c:	f7ff fb68 	bl	8000d00 <display7SEG>
		display7SEG_2(four);
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f7ff fcf5 	bl	8001020 <display7SEG_2>
		state7SEG=2;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <scan7SEG+0xcc>)
 8001638:	2202      	movs	r2, #2
 800163a:	601a      	str	r2, [r3, #0]
		break;
 800163c:	e014      	b.n	8001668 <scan7SEG+0xc0>
		HAL_GPIO_WritePin(PA7_GPIO_Port,PA7_Pin,RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <scan7SEG+0xd0>)
 8001644:	f000 fb41 	bl	8001cca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA8_GPIO_Port,PA8_Pin,SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	480a      	ldr	r0, [pc, #40]	; (8001678 <scan7SEG+0xd0>)
 8001650:	f000 fb3b 	bl	8001cca <HAL_GPIO_WritePin>
		display7SEG(one);
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f7ff fb53 	bl	8000d00 <display7SEG>
		display7SEG_2(three);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fce0 	bl	8001020 <display7SEG_2>
		state7SEG=1;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <scan7SEG+0xcc>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
		break;
 8001666:	bf00      	nop
	}
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	66666667 	.word	0x66666667
 8001674:	20000020 	.word	0x20000020
 8001678:	40010800 	.word	0x40010800

0800167c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800167c:	f7ff fb3a 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001682:	490c      	ldr	r1, [pc, #48]	; (80016b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001698:	4c09      	ldr	r4, [pc, #36]	; (80016c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f001 fb05 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016aa:	f7fe ff7f 	bl	80005ac <main>
  bx lr
 80016ae:	4770      	bx	lr
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80016b8:	08002d50 	.word	0x08002d50
  ldr r2, =_sbss
 80016bc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80016c0:	200000e4 	.word	0x200000e4

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x28>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f923 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fa7e 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f93b 	bl	800198e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f903 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000001c 	.word	0x2000001c
 800174c:	20000028 	.word	0x20000028
 8001750:	20000024 	.word	0x20000024

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x1c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x20>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_IncTick+0x20>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000028 	.word	0x20000028
 8001774:	200000e0 	.word	0x200000e0

08001778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <HAL_GetTick+0x10>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	200000e0 	.word	0x200000e0

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <__NVIC_EnableIRQ+0x34>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff90 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff2d 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff42 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff35 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e148      	b.n	8001c4e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8137 	bne.w	8001c48 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4aa3      	ldr	r2, [pc, #652]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4aa1      	ldr	r2, [pc, #644]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4aa1      	ldr	r2, [pc, #644]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a9f      	ldr	r2, [pc, #636]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a9f      	ldr	r2, [pc, #636]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a9d      	ldr	r2, [pc, #628]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a9d      	ldr	r2, [pc, #628]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a9b      	ldr	r2, [pc, #620]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a9b      	ldr	r2, [pc, #620]	; (8001c7c <HAL_GPIO_Init+0x2d4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a99      	ldr	r2, [pc, #612]	; (8001c7c <HAL_GPIO_Init+0x2d4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a82      	ldr	r2, [pc, #520]	; (8001c80 <HAL_GPIO_Init+0x2d8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8090 	beq.w	8001c48 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <HAL_GPIO_Init+0x2dc>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a55      	ldr	r2, [pc, #340]	; (8001c84 <HAL_GPIO_Init+0x2dc>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_GPIO_Init+0x2dc>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <HAL_GPIO_Init+0x2e0>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_GPIO_Init+0x2e4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00d      	beq.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a48      	ldr	r2, [pc, #288]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x1dc>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a47      	ldr	r2, [pc, #284]	; (8001c94 <HAL_GPIO_Init+0x2ec>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_GPIO_Init+0x1d8>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e004      	b.n	8001b8a <HAL_GPIO_Init+0x1e2>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e002      	b.n	8001b8a <HAL_GPIO_Init+0x1e2>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_GPIO_Init+0x1e2>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	f002 0203 	and.w	r2, r2, #3
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	4093      	lsls	r3, r2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b9a:	493b      	ldr	r1, [pc, #236]	; (8001c88 <HAL_GPIO_Init+0x2e0>)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4937      	ldr	r1, [pc, #220]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bc2:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4933      	ldr	r1, [pc, #204]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	492d      	ldr	r1, [pc, #180]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60cb      	str	r3, [r1, #12]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4929      	ldr	r1, [pc, #164]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4923      	ldr	r1, [pc, #140]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	491f      	ldr	r1, [pc, #124]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4919      	ldr	r1, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4915      	ldr	r1, [pc, #84]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f aeaf 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	372c      	adds	r7, #44	; 0x2c
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	10320000 	.word	0x10320000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e001      	b.n	8001cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cda:	787b      	ldrb	r3, [r7, #1]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce0:	887a      	ldrh	r2, [r7, #2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	041a      	lsls	r2, r3, #16
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e26c      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d00c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d58:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d112      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
 8001d64:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x12c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d168      	bne.n	8001e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e246      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x76>
 8001d94:	4b80      	ldr	r3, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7f      	ldr	r2, [pc, #508]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e02e      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0xbc>
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a71      	ldr	r2, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001de8:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a67      	ldr	r2, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fcb6 	bl	8001778 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fcb2 	bl	8001778 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1fa      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe4>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fca2 	bl	8001778 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fc9e 	bl	8001778 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1e6      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x10c>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1ba      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4939      	ldr	r1, [pc, #228]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fc57 	bl	8001778 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fc53 	bl	8001778 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e19b      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4927      	ldr	r1, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fc36 	bl	8001778 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fc32 	bl	8001778 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e17a      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03a      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d019      	beq.n	8001f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fc16 	bl	8001778 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fc12 	bl	8001778 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e15a      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 fa9a 	bl	80024a8 <RCC_Delay>
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fbfc 	bl	8001778 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fbf8 	bl	8001778 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d908      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e140      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	42420000 	.word	0x42420000
 8001fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e9      	bne.n	8001f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a6 	beq.w	800210a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b97      	ldr	r3, [pc, #604]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b94      	ldr	r3, [pc, #592]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a93      	ldr	r2, [pc, #588]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b91      	ldr	r3, [pc, #580]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a8a      	ldr	r2, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff fbb9 	bl	8001778 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff fbb5 	bl	8001778 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0fd      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x312>
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e02d      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x334>
 8002046:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	4b73      	ldr	r3, [pc, #460]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a72      	ldr	r2, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	e01c      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x356>
 8002068:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a63      	ldr	r2, [pc, #396]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff fb69 	bl	8001778 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff fb65 	bl	8001778 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0ab      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <HAL_RCC_OscConfig+0x37e>
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb53 	bl	8001778 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fb4f 	bl	8001778 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e095      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8081 	beq.w	8002216 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d061      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d146      	bne.n	80021b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fb23 	bl	8001778 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fb1f 	bl	8001778 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e067      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	492d      	ldr	r1, [pc, #180]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a19      	ldr	r1, [r3, #32]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	430b      	orrs	r3, r1
 8002182:	4927      	ldr	r1, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff faf3 	bl	8001778 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff faef 	bl	8001778 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e037      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x46a>
 80021b4:	e02f      	b.n	8002216 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fadc 	bl	8001778 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fad8 	bl	8001778 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e020      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x498>
 80021e2:	e018      	b.n	8002216 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e013      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	42420060 	.word	0x42420060

0800222c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0d0      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4965      	ldr	r1, [pc, #404]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0b8      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	494d      	ldr	r1, [pc, #308]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d040      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d115      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e073      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06b      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4936      	ldr	r1, [pc, #216]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7ff fa2c 	bl	8001778 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7ff fa28 	bl	8001778 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e053      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d210      	bcs.n	800237c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4922      	ldr	r1, [pc, #136]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e032      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4916      	ldr	r1, [pc, #88]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	490e      	ldr	r1, [pc, #56]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ba:	f000 f821 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490a      	ldr	r1, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1cc>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1d0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f98a 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08002d24 	.word	0x08002d24
 80023f8:	2000001c 	.word	0x2000001c
 80023fc:	20000024 	.word	0x20000024

08002400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_GetSysClockFreq+0x94>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x30>
 800242a:	2b08      	cmp	r3, #8
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x36>
 800242e:	e027      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_GetSysClockFreq+0x98>)
 8002432:	613b      	str	r3, [r7, #16]
      break;
 8002434:	e027      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_RCC_GetSysClockFreq+0x94>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0c5b      	lsrs	r3, r3, #17
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_GetSysClockFreq+0x98>)
 8002462:	fb02 f203 	mul.w	r2, r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e004      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	613b      	str	r3, [r7, #16]
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetSysClockFreq+0x98>)
 8002482:	613b      	str	r3, [r7, #16]
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	693b      	ldr	r3, [r7, #16]
}
 8002488:	4618      	mov	r0, r3
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	007a1200 	.word	0x007a1200
 800249c:	08002d34 	.word	0x08002d34
 80024a0:	08002d44 	.word	0x08002d44
 80024a4:	003d0900 	.word	0x003d0900

080024a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <RCC_Delay+0x34>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <RCC_Delay+0x38>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0a5b      	lsrs	r3, r3, #9
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c4:	bf00      	nop
  }
  while (Delay --);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	60fa      	str	r2, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <RCC_Delay+0x1c>
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	2000001c 	.word	0x2000001c
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fb9c 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 fa6e 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e035      	b.n	8002608 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_TIM_Base_Start_IT+0x90>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d004      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_Base_Start_IT+0x94>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d010      	beq.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	e007      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9b4 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9a7 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f9b6 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f98a 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f97d 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f98c 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f960 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f953 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f962 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f936 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f929 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f938 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f810 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa6b 	bl	8002ca2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8fc 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa36 	bl	8002c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x1c>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b4      	b.n	80029b2 <HAL_TIM_ConfigClockSource+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd4>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	f000 8086 	beq.w	800299e <HAL_TIM_ConfigClockSource+0x172>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa6>
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x11a>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xfa>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x13a>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 f95e 	bl	8002ba2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
      break;
 80028fe:	e04f      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f000 f947 	bl	8002ba2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	609a      	str	r2, [r3, #8]
      break;
 8002924:	e03c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8be 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	; 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f915 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002944:	e02c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8dc 	bl	8002b10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	; 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f905 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002964:	e01c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f89e 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f8f5 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8ec 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002996:	e003      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e000      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800299e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <TIM_Base_SetConfig+0xac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <TIM_Base_SetConfig+0xac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0210 	bic.w	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	031b      	lsls	r3, r3, #12
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f043 0307 	orr.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	609a      	str	r2, [r3, #8]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e041      	b.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d004      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400

08002c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	4d0c      	ldr	r5, [pc, #48]	; (8002cec <__libc_init_array+0x38>)
 8002cba:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	f000 f822 	bl	8002d0c <_init>
 8002cc8:	2600      	movs	r6, #0
 8002cca:	4d0a      	ldr	r5, [pc, #40]	; (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002d48 	.word	0x08002d48
 8002cf0:	08002d48 	.word	0x08002d48
 8002cf4:	08002d48 	.word	0x08002d48
 8002cf8:	08002d4c 	.word	0x08002d4c

08002cfc <memset>:
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4402      	add	r2, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
